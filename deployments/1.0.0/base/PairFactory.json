{
  "address": "0x2D9A3a2bd6400eE28d770c7254cA840c82faf23f",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lockerFeesP",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "feeDistributor",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_stable",
          "type": "bool"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitializable",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rangeA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rangeB",
          "type": "uint256"
        }
      ],
      "name": "getPairs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "initRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPair",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairCodeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingFeeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingPauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_stable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        }
      ],
      "name": "setFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pauser",
          "type": "address"
        }
      ],
      "name": "setPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "volatileFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2da3fda3105291ab1396a0a0666154c9874afaa6d066c55ec5abac1d1d4098d3",
  "receipt": {
    "to": null,
    "from": "0x628C4951a34d8f1990940dbDa33532b0cf5CF164",
    "contractAddress": "0x2D9A3a2bd6400eE28d770c7254cA840c82faf23f",
    "transactionIndex": 7,
    "gasUsed": "5129279",
    "logsBloom": "0x
    "blockHash": "0x61249e9f84c2ce92a80e64e3d6c2ddfa04db0a8db9e5d5be2efa9cd8402e1a81",
    "transactionHash": "0x2da3fda3105291ab1396a0a0666154c9874afaa6d066c55ec5abac1d1d4098d3",
    "logs": [],
    "blockNumber": 11704797,
    "cumulativeGasUsed": "5932746",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b59c519d869a54e9fa3cf6527ed6281f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockerFeesP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeDistributor\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stable\",\"type\":\"bool\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitializable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rangeA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rangeB\",\"type\":\"uint256\"}],\"name\":\"getPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"initRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairCodeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingPauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_stable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"}],\"name\":\"setPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volatileFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/PairFactory.sol\":\"PairFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"contracts/libraries/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"contracts/interfaces/IPair.sol\\\";\\nimport \\\"contracts/interfaces/IPairCallee.sol\\\";\\nimport \\\"contracts/factories/PairFactory.sol\\\";\\nimport \\\"contracts/PairFees.sol\\\";\\nimport \\\"contracts/interfaces/IFeeDistributor.sol\\\";\\n\\ninterface ERC20 {\\n    function symbol() external returns (string memory);\\n\\n    function decimals() external returns (uint8);\\n}\\n\\n// The base pair of pools, either stable or volatile\\ncontract Pair is IPair {\\n    string public name;\\n    string public symbol;\\n    uint8 public constant decimals = 18;\\n\\n    // Used to denote stable or volatile pair, not immutable since construction happens in the initialize method for CREATE2 deterministic addresses\\n    bool public immutable stable;\\n\\n    uint public totalSupply = 0;\\n\\n    mapping(address => mapping(address => uint)) public allowance;\\n    mapping(address => uint) public balanceOf;\\n\\n    bytes32 internal DOMAIN_SEPARATOR;\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 internal constant PERMIT_TYPEHASH =\\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n    mapping(address => uint) public nonces;\\n\\n    uint internal constant MINIMUM_LIQUIDITY = 10 ** 3;\\n\\n    address public immutable token0;\\n    address public immutable token1;\\n    address public immutable fees;\\n    address immutable factory;\\n\\n    // Structure to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint timestamp;\\n        uint reserve0Cumulative;\\n        uint reserve1Cumulative;\\n    }\\n\\n    // Capture oracle reading every 30 minutes\\n    uint constant periodSize = 1800;\\n\\n    Observation[] public observations;\\n\\n    uint internal immutable decimals0;\\n    uint internal immutable decimals1;\\n\\n    uint public reserve0;\\n    uint public reserve1;\\n    uint public blockTimestampLast;\\n\\n    uint public reserve0CumulativeLast;\\n    uint public reserve1CumulativeLast;\\n\\n    // index0 and index1 are used to accumulate fees, this is split out from normal trades to keep the swap \\\"clean\\\"\\n    // this further allows LP holders to easily claim fees for tokens they have/staked\\n    uint public index0 = 0;\\n    uint public index1 = 0;\\n\\n    // position assigned to each LP to track their current index0 & index1 vs the global position\\n    mapping(address => uint) public supplyIndex0;\\n    mapping(address => uint) public supplyIndex1;\\n\\n    // tracks the amount of unclaimed, but claimable tokens off of fees for token0 and token1\\n    mapping(address => uint) public claimable0;\\n    mapping(address => uint) public claimable1;\\n\\n    // LP fees proportion scale.\\n    uint internal constant LOCKER_FEES_SCALE = 1e4;\\n    // Fee distributor contract to accumulate fees for LP token lockers.\\n    IFeeDistributor public immutable feeDistributor;\\n    // LP fees percentage that goes to LP tokens that are not locked.\\n    uint public immutable lockerFeesP; // Scaled by 1e4.\\n\\n    event Fees(address indexed sender, uint amount0, uint amount1);\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint amount0,\\n        uint amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint reserve0, uint reserve1);\\n    event Claim(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint amount0,\\n        uint amount1\\n    );\\n\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n    constructor() {\\n        factory = msg.sender;\\n        (\\n            address _token0,\\n            address _token1,\\n            bool _stable,\\n            uint _lockerFeesP,\\n            address _feeDistributor\\n        ) = PairFactory(msg.sender).getInitializable();\\n        require(\\n            _lockerFeesP == 0 ||\\n                (_lockerFeesP < LOCKER_FEES_SCALE && _feeDistributor != address(0)),\\n            \\\"MISS_FEE_DIST\\\"\\n        );\\n        (token0, token1, stable, lockerFeesP, feeDistributor) = (\\n            _token0,\\n            _token1,\\n            _stable,\\n            _lockerFeesP,\\n            IFeeDistributor(_feeDistributor)\\n        );\\n        fees = address(new PairFees(_token0, _token1));\\n        if (_stable) {\\n            name = string(\\n                abi.encodePacked(\\n                    \\\"StableV1 AMM - \\\",\\n                    ERC20(_token0).symbol(),\\n                    \\\"/\\\",\\n                    ERC20(_token1).symbol()\\n                )\\n            );\\n            symbol = string(\\n                abi.encodePacked(\\n                    \\\"sAMM-\\\",\\n                    ERC20(_token0).symbol(),\\n                    \\\"/\\\",\\n                    ERC20(_token1).symbol()\\n                )\\n            );\\n        } else {\\n            name = string(\\n                abi.encodePacked(\\n                    \\\"VolatileV1 AMM - \\\",\\n                    ERC20(_token0).symbol(),\\n                    \\\"/\\\",\\n                    ERC20(_token1).symbol()\\n                )\\n            );\\n            symbol = string(\\n                abi.encodePacked(\\n                    \\\"vAMM-\\\",\\n                    ERC20(_token0).symbol(),\\n                    \\\"/\\\",\\n                    ERC20(_token1).symbol()\\n                )\\n            );\\n        }\\n\\n        decimals0 = 10 ** ERC20(_token0).decimals();\\n        decimals1 = 10 ** ERC20(_token1).decimals();\\n\\n        observations.push(Observation(block.timestamp, 0, 0));\\n    }\\n\\n    // simple re-entrancy check\\n    uint internal _unlocked = 1;\\n    modifier lock() {\\n        require(_unlocked == 1);\\n        _unlocked = 2;\\n        _;\\n        _unlocked = 1;\\n    }\\n\\n    function observationLength() external view returns (uint) {\\n        return observations.length;\\n    }\\n\\n    function lastObservation() public view returns (Observation memory) {\\n        return observations[observations.length - 1];\\n    }\\n\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint dec0,\\n            uint dec1,\\n            uint r0,\\n            uint r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        )\\n    {\\n        return (\\n            decimals0,\\n            decimals1,\\n            reserve0,\\n            reserve1,\\n            stable,\\n            token0,\\n            token1\\n        );\\n    }\\n\\n    function tokens() external view returns (address, address) {\\n        return (token0, token1);\\n    }\\n\\n    // claim accumulated but unclaimed fees (viewable via claimable0 and claimable1)\\n    function claimFees() external returns (uint claimed0, uint claimed1) {\\n        address claimer = msg.sender;\\n        if (msg.sender == address(feeDistributor)) {\\n            claimer = feeDistributor.tokenLocker();\\n        }\\n\\n        _updateFor(claimer);\\n        claimed0 = claimable0[claimer];\\n        claimed1 = claimable1[claimer];\\n\\n        if (claimed0 > 0 || claimed1 > 0) {\\n            claimable0[claimer] = 0;\\n            claimable1[claimer] = 0;\\n            PairFees(fees).claimFeesFor(msg.sender, claimed0, claimed1);\\n\\n            emit Claim(claimer, msg.sender, claimed0, claimed1);\\n        }\\n    }\\n\\n    // Accrue fees on token0\\n    function _update0(uint amount) internal {\\n        _safeTransfer(token0, fees, amount); // transfer the fees out to PairFees\\n        uint256 _ratio = (amount * 1e18) / totalSupply; // 1e18 adjustment is removed during claim\\n        if (_ratio > 0) {\\n            index0 += _ratio;\\n        }\\n        emit Fees(msg.sender, amount, 0);\\n    }\\n\\n    // Accrue fees on token1\\n    function _update1(uint amount) internal {\\n        _safeTransfer(token1, fees, amount);\\n        uint256 _ratio = (amount * 1e18) / totalSupply;\\n        if (_ratio > 0) {\\n            index1 += _ratio;\\n        }\\n        emit Fees(msg.sender, 0, amount);\\n    }\\n\\n    // this function MUST be called on any balance changes, otherwise can be used to infinitely claim fees\\n    // Fees are segregated from core funds, so fees can never put liquidity at risk\\n    // If non-zero lockerFeesP, then accrue portion of fees from LP fees to feeDistributor for LP lockers.\\n    function _updateFor(address recipient) internal {\\n        uint _supplied = balanceOf[recipient]; // get LP balance of `recipient`\\n        if (_supplied > 0) {\\n            uint _supplyIndex0 = supplyIndex0[recipient]; // get last adjusted index0 for recipient\\n            uint _supplyIndex1 = supplyIndex1[recipient];\\n            uint _index0 = index0; // get global index0 for accumulated fees\\n            uint _index1 = index1;\\n            supplyIndex0[recipient] = _index0; // update user current position to global position\\n            supplyIndex1[recipient] = _index1;\\n            uint _delta0 = _index0 - _supplyIndex0; // see if there is any difference that need to be accrued\\n            uint _delta1 = _index1 - _supplyIndex1;\\n\\n            if (_delta0 > 0) {\\n                uint _share = (_supplied * _delta0) / 1e18; // add accrued difference for each supplied token\\n                claimable0[recipient] +=\\n                    _share -\\n                    (_share * lockerFeesP) /\\n                    LOCKER_FEES_SCALE;\\n                if (lockerFeesP != 0) {\\n                    claimable0[feeDistributor.tokenLocker()] +=\\n                        (_share * lockerFeesP) /\\n                        LOCKER_FEES_SCALE;\\n                }\\n            }\\n            if (_delta1 > 0) {\\n                uint _share = (_supplied * _delta1) / 1e18;\\n                claimable1[recipient] +=\\n                    _share -\\n                    (_share * lockerFeesP) /\\n                    LOCKER_FEES_SCALE;\\n                if (lockerFeesP != 0) {\\n                    claimable1[feeDistributor.tokenLocker()] +=\\n                        (_share * lockerFeesP) /\\n                        LOCKER_FEES_SCALE;\\n                }\\n            }\\n        } else {\\n            supplyIndex0[recipient] = index0; // new users are set to the default global state\\n            supplyIndex1[recipient] = index1;\\n        }\\n    }\\n\\n    function getReserves()\\n        public\\n        view\\n        returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast)\\n    {\\n        _reserve0 = reserve0;\\n        _reserve1 = reserve1;\\n        _blockTimestampLast = blockTimestampLast;\\n    }\\n\\n    // update reserves and, on the first call per block, price accumulators\\n    function _update(\\n        uint balance0,\\n        uint balance1,\\n        uint _reserve0,\\n        uint _reserve1\\n    ) internal {\\n        uint blockTimestamp = block.timestamp;\\n        uint timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\\n            reserve0CumulativeLast += _reserve0 * timeElapsed;\\n            reserve1CumulativeLast += _reserve1 * timeElapsed;\\n        }\\n\\n        Observation memory _point = lastObservation();\\n        timeElapsed = blockTimestamp - _point.timestamp; // compare the last observation with current timestamp, if greater than 30 minutes, record a new event\\n        if (timeElapsed > periodSize) {\\n            observations.push(\\n                Observation(\\n                    blockTimestamp,\\n                    reserve0CumulativeLast,\\n                    reserve1CumulativeLast\\n                )\\n            );\\n        }\\n        reserve0 = balance0;\\n        reserve1 = balance1;\\n        blockTimestampLast = blockTimestamp;\\n        emit Sync(reserve0, reserve1);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices()\\n        public\\n        view\\n        returns (\\n            uint reserve0Cumulative,\\n            uint reserve1Cumulative,\\n            uint blockTimestamp\\n        )\\n    {\\n        blockTimestamp = block.timestamp;\\n        reserve0Cumulative = reserve0CumulativeLast;\\n        reserve1Cumulative = reserve1CumulativeLast;\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (\\n            uint _reserve0,\\n            uint _reserve1,\\n            uint _blockTimestampLast\\n        ) = getReserves();\\n        if (_blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint timeElapsed = blockTimestamp - _blockTimestampLast;\\n            reserve0Cumulative += _reserve0 * timeElapsed;\\n            reserve1Cumulative += _reserve1 * timeElapsed;\\n        }\\n    }\\n\\n    // gives the current twap price measured from amountIn * tokenIn gives amountOut\\n    function current(\\n        address tokenIn,\\n        uint amountIn\\n    ) external view returns (uint amountOut) {\\n        Observation memory _observation = lastObservation();\\n        (\\n            uint reserve0Cumulative,\\n            uint reserve1Cumulative,\\n\\n        ) = currentCumulativePrices();\\n        if (block.timestamp == _observation.timestamp) {\\n            _observation = observations[observations.length - 2];\\n        }\\n\\n        uint timeElapsed = block.timestamp - _observation.timestamp;\\n        uint _reserve0 = (reserve0Cumulative -\\n            _observation.reserve0Cumulative) / timeElapsed;\\n        uint _reserve1 = (reserve1Cumulative -\\n            _observation.reserve1Cumulative) / timeElapsed;\\n        amountOut = _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n    }\\n\\n    // as per `current`, however allows user configured granularity, up to the full window size\\n    function quote(\\n        address tokenIn,\\n        uint amountIn,\\n        uint granularity\\n    ) external view returns (uint amountOut) {\\n        uint[] memory _prices = sample(tokenIn, amountIn, granularity, 1);\\n        uint priceAverageCumulative;\\n        for (uint i = 0; i < _prices.length; i++) {\\n            priceAverageCumulative += _prices[i];\\n        }\\n        return priceAverageCumulative / granularity;\\n    }\\n\\n    // returns a memory set of twap prices\\n    function prices(\\n        address tokenIn,\\n        uint amountIn,\\n        uint points\\n    ) external view returns (uint[] memory) {\\n        return sample(tokenIn, amountIn, points, 1);\\n    }\\n\\n    function sample(\\n        address tokenIn,\\n        uint amountIn,\\n        uint points,\\n        uint window\\n    ) public view returns (uint[] memory) {\\n        uint[] memory _prices = new uint[](points);\\n\\n        uint length = observations.length - 1;\\n        uint i = length - (points * window);\\n        uint nextIndex = 0;\\n        uint index = 0;\\n\\n        for (; i < length; i += window) {\\n            nextIndex = i + window;\\n            uint timeElapsed = observations[nextIndex].timestamp -\\n                observations[i].timestamp;\\n            uint _reserve0 = (observations[nextIndex].reserve0Cumulative -\\n                observations[i].reserve0Cumulative) / timeElapsed;\\n            uint _reserve1 = (observations[nextIndex].reserve1Cumulative -\\n                observations[i].reserve1Cumulative) / timeElapsed;\\n            _prices[index] = _getAmountOut(\\n                amountIn,\\n                tokenIn,\\n                _reserve0,\\n                _reserve1\\n            );\\n            // index < length; length cannot overflow\\n            unchecked {\\n                index = index + 1;\\n            }\\n        }\\n        return _prices;\\n    }\\n\\n    // this low-level function should be called by addLiquidity functions in Router.sol, which performs important safety checks\\n    // standard uniswap v2 implementation\\n    function mint(address to) external lock returns (uint liquidity) {\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n        uint _balance0 = IERC20(token0).balanceOf(address(this));\\n        uint _balance1 = IERC20(token1).balanceOf(address(this));\\n        uint _amount0 = _balance0 - _reserve0;\\n        uint _amount1 = _balance1 - _reserve1;\\n\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        if (_totalSupply == 0) {\\n            liquidity = Math.sqrt(_k(_amount0, _amount1)) - MINIMUM_LIQUIDITY;\\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = Math.min(\\n                (_amount0 * _totalSupply) / _reserve0,\\n                (_amount1 * _totalSupply) / _reserve1\\n            );\\n        }\\n        require(liquidity > 0, \\\"ILM\\\"); // Pair: INSUFFICIENT_LIQUIDITY_MINTED\\n        _mint(to, liquidity);\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Mint(msg.sender, _amount0, _amount1);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    // standard uniswap v2 implementation\\n    function burn(\\n        address to\\n    ) external lock returns (uint amount0, uint amount1) {\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n        (address _token0, address _token1) = (token0, token1);\\n        uint _balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint _balance1 = IERC20(_token1).balanceOf(address(this));\\n        uint _liquidity = balanceOf[address(this)];\\n\\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\\n        amount0 = (_liquidity * _balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        amount1 = (_liquidity * _balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n        require(amount0 > 0 && amount1 > 0, \\\"ILB\\\"); // Pair: INSUFFICIENT_LIQUIDITY_BURNED\\n        _burn(address(this), _liquidity);\\n        _safeTransfer(_token0, to, amount0);\\n        _safeTransfer(_token1, to, amount1);\\n        _balance0 = IERC20(_token0).balanceOf(address(this));\\n        _balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Burn(msg.sender, amount0, amount1, to);\\n    }\\n\\n    // this low-level function should be called from a contract which performs important safety checks\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external lock {\\n        require(!PairFactory(factory).isPaused());\\n        require(amount0Out > 0 || amount1Out > 0, \\\"IOA\\\"); // Pair: INSUFFICIENT_OUTPUT_AMOUNT\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"IL\\\"); // Pair: INSUFFICIENT_LIQUIDITY\\n\\n        uint _balance0;\\n        uint _balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            (address _token0, address _token1) = (token0, token1);\\n            require(to != _token0 && to != _token1, \\\"IT\\\"); // Pair: INVALID_TO\\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\\n            if (data.length > 0)\\n                IPairCallee(to).hook(msg.sender, amount0Out, amount1Out, data); // callback, used for flash loans\\n            _balance0 = IERC20(_token0).balanceOf(address(this));\\n            _balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint amount0In = _balance0 > _reserve0 - amount0Out\\n            ? _balance0 - (_reserve0 - amount0Out)\\n            : 0;\\n        uint amount1In = _balance1 > _reserve1 - amount1Out\\n            ? _balance1 - (_reserve1 - amount1Out)\\n            : 0;\\n        require(amount0In > 0 || amount1In > 0, \\\"IIA\\\"); // Pair: INSUFFICIENT_INPUT_AMOUNT\\n        {\\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\\n            (address _token0, address _token1) = (token0, token1);\\n            if (amount0In > 0)\\n                _update0(\\n                    (amount0In * PairFactory(factory).getFee(stable)) / 10000\\n                ); // accrue fees for token0 and move them out of pool\\n            if (amount1In > 0)\\n                _update1(\\n                    (amount1In * PairFactory(factory).getFee(stable)) / 10000\\n                ); // accrue fees for token1 and move them out of pool\\n            _balance0 = IERC20(_token0).balanceOf(address(this)); // since we removed tokens, we need to reconfirm balances, can also simply use previous balance - amountIn/ 10000, but doing balanceOf again as safety check\\n            _balance1 = IERC20(_token1).balanceOf(address(this));\\n            // The curve, either x3y+y3x for stable pools, or x*y for volatile pools\\n            require(_k(_balance0, _balance1) >= _k(_reserve0, _reserve1), \\\"K\\\"); // Pair: K\\n        }\\n\\n        _update(_balance0, _balance1, _reserve0, _reserve1);\\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\\n    }\\n\\n    // force balances to match reserves\\n    function skim(address to) external lock {\\n        (address _token0, address _token1) = (token0, token1);\\n        _safeTransfer(\\n            _token0,\\n            to,\\n            IERC20(_token0).balanceOf(address(this)) - (reserve0)\\n        );\\n        _safeTransfer(\\n            _token1,\\n            to,\\n            IERC20(_token1).balanceOf(address(this)) - (reserve1)\\n        );\\n    }\\n\\n    // force reserves to match balances\\n    function sync() external lock {\\n        _update(\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this)),\\n            reserve0,\\n            reserve1\\n        );\\n    }\\n\\n    function _f(uint x0, uint y) internal pure returns (uint) {\\n        return\\n            (x0 * ((((y * y) / 1e18) * y) / 1e18)) /\\n            1e18 +\\n            (((((x0 * x0) / 1e18) * x0) / 1e18) * y) /\\n            1e18;\\n    }\\n\\n    function _d(uint x0, uint y) internal pure returns (uint) {\\n        return\\n            (3 * x0 * ((y * y) / 1e18)) /\\n            1e18 +\\n            ((((x0 * x0) / 1e18) * x0) / 1e18);\\n    }\\n\\n    function _get_y(uint x0, uint xy, uint y) internal pure returns (uint) {\\n        for (uint i = 0; i < 255; i++) {\\n            uint y_prev = y;\\n            uint k = _f(x0, y);\\n            if (k < xy) {\\n                uint dy = ((xy - k) * 1e18) / _d(x0, y);\\n                y = y + dy;\\n            } else {\\n                uint dy = ((k - xy) * 1e18) / _d(x0, y);\\n                y = y - dy;\\n            }\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    return y;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    return y;\\n                }\\n            }\\n        }\\n        return y;\\n    }\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        address tokenIn\\n    ) external view returns (uint) {\\n        (uint _reserve0, uint _reserve1) = (reserve0, reserve1);\\n        amountIn -= (amountIn * PairFactory(factory).getFee(stable)) / 10000; // remove fee from amount received\\n        return _getAmountOut(amountIn, tokenIn, _reserve0, _reserve1);\\n    }\\n\\n    function _getAmountOut(\\n        uint amountIn,\\n        address tokenIn,\\n        uint _reserve0,\\n        uint _reserve1\\n    ) internal view returns (uint) {\\n        if (stable) {\\n            uint xy = _k(_reserve0, _reserve1);\\n            _reserve0 = (_reserve0 * 1e18) / decimals0;\\n            _reserve1 = (_reserve1 * 1e18) / decimals1;\\n            (uint reserveA, uint reserveB) = tokenIn == token0\\n                ? (_reserve0, _reserve1)\\n                : (_reserve1, _reserve0);\\n            amountIn = tokenIn == token0\\n                ? (amountIn * 1e18) / decimals0\\n                : (amountIn * 1e18) / decimals1;\\n            uint y = reserveB - _get_y(amountIn + reserveA, xy, reserveB);\\n            return (y * (tokenIn == token0 ? decimals1 : decimals0)) / 1e18;\\n        } else {\\n            (uint reserveA, uint reserveB) = tokenIn == token0\\n                ? (_reserve0, _reserve1)\\n                : (_reserve1, _reserve0);\\n            return (amountIn * reserveB) / (reserveA + amountIn);\\n        }\\n    }\\n\\n    function _k(uint x, uint y) internal view returns (uint) {\\n        if (stable) {\\n            uint _x = (x * 1e18) / decimals0;\\n            uint _y = (y * 1e18) / decimals1;\\n            uint _a = (_x * _y) / 1e18;\\n            uint _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\n            return (_a * _b) / 1e18; // x3y+y3x >= k\\n        } else {\\n            return x * y; // xy >= k\\n        }\\n    }\\n\\n    function _mint(address dst, uint amount) internal {\\n        _updateFor(dst); // balances must be updated on mint/burn/transfer\\n        totalSupply += amount;\\n        balanceOf[dst] += amount;\\n        emit Transfer(address(0), dst, amount);\\n    }\\n\\n    function _burn(address dst, uint amount) internal {\\n        _updateFor(dst);\\n        totalSupply -= amount;\\n        balanceOf[dst] -= amount;\\n        emit Transfer(dst, address(0), amount);\\n    }\\n\\n    function approve(address spender, uint amount) external returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"Pair: EXPIRED\\\");\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                ),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                DOMAIN_SEPARATOR,\\n                keccak256(\\n                    abi.encode(\\n                        PERMIT_TYPEHASH,\\n                        owner,\\n                        spender,\\n                        value,\\n                        nonces[owner]++,\\n                        deadline\\n                    )\\n                )\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(\\n            recoveredAddress != address(0) && recoveredAddress == owner,\\n            \\\"Pair: INVALID_SIGNATURE\\\"\\n        );\\n        allowance[owner][spender] = value;\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function transfer(address dst, uint amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint amount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint spenderAllowance = allowance[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint).max) {\\n            uint newAllowance = spenderAllowance - amount;\\n            allowance[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    function _transferTokens(address src, address dst, uint amount) internal {\\n        _updateFor(src); // update fee position for src\\n        _updateFor(dst); // update fee position for dst\\n\\n        balanceOf[src] -= amount;\\n        balanceOf[dst] += amount;\\n\\n        emit Transfer(src, dst, amount);\\n    }\\n\\n    function _safeTransfer(address token, address to, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n}\\n\",\"keccak256\":\"0x6cb888bdc978cf4bb7ecbe8bafb4ad42fb836d405970e90e4cd780087788da02\",\"license\":\"MIT\"},\"contracts/PairFees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// Pair Fees contract is used as a 1:1 pair relationship to split out fees, this ensures that the curve does not need to be modified for LP shares\\ncontract PairFees {\\n    address internal immutable pair; // The pair it is bonded to\\n    address internal immutable token0; // token0 of pair, saved localy and statically for gas optimization\\n    address internal immutable token1; // Token1 of pair, saved localy and statically for gas optimization\\n\\n    constructor(address _token0, address _token1) {\\n        pair = msg.sender;\\n        token0 = _token0;\\n        token1 = _token1;\\n    }\\n\\n    function _safeTransfer(address token, address to, uint256 value) internal {\\n        require(token.code.length > 0);\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20.transfer.selector, to, value)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))));\\n    }\\n\\n    // Allow the pair to transfer fees to users\\n    function claimFeesFor(\\n        address recipient,\\n        uint amount0,\\n        uint amount1\\n    ) external {\\n        require(msg.sender == pair);\\n        if (amount0 > 0) _safeTransfer(token0, recipient, amount0);\\n        if (amount1 > 0) _safeTransfer(token1, recipient, amount1);\\n    }\\n}\\n\",\"keccak256\":\"0x700c781325668c5cc9155bb32db9ddc6b0227155b4215ab0f7c153501a7f01c1\",\"license\":\"MIT\"},\"contracts/factories/PairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"contracts/interfaces/IPairFactory.sol\\\";\\nimport \\\"contracts/Pair.sol\\\";\\n\\ncontract PairFactory is IPairFactory {\\n    bool public isPaused;\\n    address public pauser;\\n    address public pendingPauser;\\n\\n    uint256 public stableFee;\\n    uint256 public volatileFee;\\n    uint256 public constant MAX_FEE = 5; // 0.05%\\n    address public feeManager;\\n    address public pendingFeeManager;\\n    address public router;\\n\\n    mapping(address => mapping(address => mapping(bool => address)))\\n        public getPair;\\n    address[] public allPairs;\\n    mapping(address => bool) public isPair; // simplified check if its a pair, given that `stable` flag might not be available in peripherals\\n\\n    address internal _temp0;\\n    address internal _temp1;\\n    bool internal _temp;\\n    uint256 internal _tempP;\\n    address internal _tempF;\\n\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        bool stable,\\n        address pair,\\n        uint\\n    );\\n\\n    constructor() {\\n        pauser = msg.sender;\\n        isPaused = false;\\n        feeManager = msg.sender;\\n        stableFee = 2; // 0.02%\\n        volatileFee = 2;\\n    }\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    function getPairs(\\n        uint256 rangeA,\\n        uint256 rangeB\\n    ) external view returns (address[] memory pairs) {\\n        require(rangeB <= allPairs.length && rangeA < rangeB, \\\"INVALID_RANGE\\\");\\n        pairs = new address[](rangeB - rangeA);\\n        for (uint256 i = rangeA; i < rangeB; ++i) {\\n            pairs[i - rangeA] = allPairs[i];\\n        }\\n    }\\n\\n    function initRouter(address _router) external {\\n        require(router == address(0), \\\"router is set\\\");\\n        router = _router;\\n    }\\n\\n    function setPauser(address _pauser) external {\\n        require(msg.sender == pauser);\\n        pendingPauser = _pauser;\\n    }\\n\\n    function acceptPauser() external {\\n        require(msg.sender == pendingPauser);\\n        pauser = pendingPauser;\\n    }\\n\\n    function setPause(bool _state) external {\\n        require(msg.sender == pauser);\\n        isPaused = _state;\\n    }\\n\\n    function setFeeManager(address _feeManager) external {\\n        require(msg.sender == feeManager, \\\"not fee manager\\\");\\n        pendingFeeManager = _feeManager;\\n    }\\n\\n    function acceptFeeManager() external {\\n        require(msg.sender == pendingFeeManager, \\\"not pending fee manager\\\");\\n        feeManager = pendingFeeManager;\\n    }\\n\\n    function setFee(bool _stable, uint256 _fee) external {\\n        require(msg.sender == feeManager, \\\"not fee manager\\\");\\n        require(_fee <= MAX_FEE, \\\"fee too high\\\");\\n        require(_fee != 0, \\\"fee must be nonzero\\\");\\n        if (_stable) {\\n            stableFee = _fee;\\n        } else {\\n            volatileFee = _fee;\\n        }\\n    }\\n\\n    function getFee(bool _stable) public view returns (uint256) {\\n        return _stable ? stableFee : volatileFee;\\n    }\\n\\n    function pairCodeHash() external pure returns (bytes32) {\\n        return keccak256(type(Pair).creationCode);\\n    }\\n\\n    function getInitializable()\\n        external\\n        view\\n        returns (address, address, bool, uint256, address)\\n    {\\n        return (_temp0, _temp1, _temp, _tempP, _tempF);\\n    }\\n\\n    // Creates pair, if lockerFeesP != 0, then lockerFeesP percentage of LP fees will go to a feeDistributor contract.\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 lockerFeesP,\\n        address feeDistributor\\n    ) external returns (address pair) {\\n        require(msg.sender == router, \\\"NR\\\");\\n        require(tokenA != tokenB, \\\"IA\\\"); // Pair: IDENTICAL_ADDRESSES\\n        (address token0, address token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"ZA\\\"); // Pair: ZERO_ADDRESS\\n        require(getPair[token0][token1][stable] == address(0), \\\"PE\\\"); // Pair: PAIR_EXISTS - single check is sufficient\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1, stable)); // notice salt includes stable as well, 3 parameters\\n        (_temp0, _temp1, _temp, _tempP, _tempF) = (\\n            token0,\\n            token1,\\n            stable,\\n            lockerFeesP,\\n            feeDistributor\\n        );\\n        pair = address(new Pair{salt: salt}());\\n        getPair[token0][token1][stable] = pair;\\n        getPair[token1][token0][stable] = pair; // populate mapping in the reverse direction\\n        allPairs.push(pair);\\n        isPair[pair] = true;\\n        emit PairCreated(token0, token1, stable, pair, allPairs.length);\\n    }\\n}\\n\",\"keccak256\":\"0x913af843782eb2455094c8aa7522b2c913741dbba1fe7351564e68df4a82bd56\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IFeeDistributor {\\n    function tokenLocker() external view returns (address);\\n}\\n\",\"keccak256\":\"0x49dbdfd824b890b4799a6f04b84c83cf35c1c1a9d2974cfee01ab1f4202fffca\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IPair {\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint dec0,\\n            uint dec1,\\n            uint r0,\\n            uint r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        );\\n    function claimFees() external returns (uint, uint);\\n    function tokens() external view returns (address, address);\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint amount\\n    ) external returns (bool);\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function getReserves()\\n        external\\n        view\\n        returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x151c53cff492ffda368d1ad6ef1e2fe6dcc71f84aa3b0cdf1cfab1cb5b7c1703\",\"license\":\"MIT\"},\"contracts/interfaces/IPairCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IPairCallee {\\n    function hook(\\n        address sender,\\n        uint amount0,\\n        uint amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x669541d18d59e9a6cd76734b0b09118f130f96c8b368455e335e71f9f7aaa4df\",\"license\":\"MIT\"},\"contracts/interfaces/IPairFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IPairFactory {\\n    function allPairsLength() external view returns (uint);\\n    function isPair(address pair) external view returns (bool);\\n    function pairCodeHash() external pure returns (bytes32);\\n    function getPair(\\n        address tokenA,\\n        address token,\\n        bool stable\\n    ) external view returns (address);\\n    function createPair(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 lockerFeesP,\\n        address feeDistributor\\n    ) external returns (address pair);\\n}\\n\",\"keccak256\":\"0x5bf5eeb7dabbdd6317b7cd8ffb3a723ac56eb3062c88707be384b56465695029\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nlibrary Math {\\n    function max(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    function min(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function cbrt(uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 x = 0;\\n            for (uint256 y = 1 << 255; y > 0; y >>= 3) {\\n                x <<= 1;\\n                uint256 z = 3 * x * (x + 1) + 1;\\n                if (n / y >= z) {\\n                    n -= y * z;\\n                    x += 1;\\n                }\\n            }\\n            return x;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x206fa284fc1483454e5fc88b9de5aec0bef9011301cdbf2d77d5d99612a3becd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a81b03191633610100810260ff1916919091178255600480546001600160a01b03191690911790556002808055600355615ab390819061005a90396000f3fe60806040523480156200001157600080fd5b5060043610620001925760003560e01c80639a7165e411620000f0578063d0fb020311620000a3578063eb13c4cf116200007a578063eb13c4cf146200038e578063f2364e9114620003de578063f887ea401462000404578063f94c53c7146200041857600080fd5b8063d0fb0203146200033d578063e1f76b441462000351578063e5e31b13146200036857600080fd5b80639a7165e414620002c75780639aab924814620002db5780639fd0506d14620002e5578063b187bd2614620002fe578063bc063e1a146200031d578063bedb86fb146200032657600080fd5b8063472d35b91162000149578063472d35b914620002355780635084ed03146200024c578063512b45ea1462000256578063574f2ba3146200026d5780636801cc3014620002765780638a4fa0d214620002b357600080fd5b80631166b44b1462000197578063167a6f9014620001b05780631e3dd18b14620001ba5780632d88af4a14620001ee57806333c2c0b3146200020557806340bbd775146200021c575b600080fd5b620001ae620001a836600462000c32565b62000422565b005b620001ae62000493565b620001d1620001cb36600462000c57565b620004d6565b6040516001600160a01b0390911681526020015b60405180910390f35b620001ae620001ff36600462000c32565b62000501565b620001d16200021636600462000c82565b62000540565b6200022660025481565b604051908152602001620001e5565b620001ae6200024636600462000c32565b6200087e565b6200022660035481565b620002266200026736600462000ce9565b620008ee565b60085462000226565b620001d16200028736600462000d07565b60076020908152600093845260408085208252928452828420905282529020546001600160a01b031681565b600554620001d1906001600160a01b031681565b600154620001d1906001600160a01b031681565b6200022662000909565b600054620001d19061010090046001600160a01b031681565b6000546200030c9060ff1681565b6040519015158152602001620001e5565b62000226600581565b620001ae6200033736600462000ce9565b6200093d565b600454620001d1906001600160a01b031681565b620001ae6200036236600462000d51565b6200096d565b6200030c6200037936600462000c32565b60096020526000908152604090205460ff1681565b600a54600b54600c54600d54604080516001600160a01b0395861681528585166020820152600160a01b90940460ff16151590840152606083019190915291909116608082015260a001620001e5565b620003f5620003ef36600462000d7e565b62000a58565b604051620001e5919062000da1565b600654620001d1906001600160a01b031681565b620001ae62000b87565b6006546001600160a01b031615620004715760405162461bcd60e51b815260206004820152600d60248201526c1c9bdd5d195c881a5cc81cd95d609a1b60448201526064015b60405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03163314620004ab57600080fd5b600154600080546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60088181548110620004e757600080fd5b6000918252602090912001546001600160a01b0316905081565b60005461010090046001600160a01b031633146200051e57600080fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6006546000906001600160a01b03163314620005845760405162461bcd60e51b8152602060048201526002602482015261272960f11b604482015260640162000468565b846001600160a01b0316866001600160a01b031603620005cc5760405162461bcd60e51b8152602060048201526002602482015261494160f01b604482015260640162000468565b600080866001600160a01b0316886001600160a01b031610620005f1578688620005f4565b87875b90925090506001600160a01b038216620006365760405162461bcd60e51b81526020600482015260026024820152615a4160f01b604482015260640162000468565b6001600160a01b038281166000908152600760209081526040808320858516845282528083208a1515845290915290205416156200069c5760405162461bcd60e51b8152602060048201526002602482015261504560f01b604482015260640162000468565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015286151560f81b604882015260009060490160408051808303601f19018152908290528051602090910120600d80546001600160a01b03199081166001600160a01b038a811691909117909255600c8a9055600b80546001600160a81b031916600160a01b8d151502831617878416179055600a805490911691871691909117905591508190620007529062000c07565b8190604051809103906000f590508015801562000773573d6000803e3d6000fd5b506001600160a01b0384811660008181526007602081815260408084208987168086529083528185208f15158087529084528286208054988a166001600160a01b0319998a16811790915582875294845282862087875284528286208187528452828620805489168617905560088054600181810183557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee39091018054909a1687179099558587526009855295839020805460ff1916909817909755935481519687529186019290925290840152929650907fc4805696c66d7cf352fc1d6bb633ad5ee82f6cb577c453024b6e0eb8306c6fc99060600160405180910390a350505095945050505050565b6004546001600160a01b03163314620008cc5760405162461bcd60e51b815260206004820152600f60248201526e3737ba103332b29036b0b730b3b2b960891b604482015260640162000468565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600081620008ff5760035462000903565b6002545b92915050565b6000604051806020016200091d9062000c07565b6020820181038252601f19601f8201166040525080519060200120905090565b60005461010090046001600160a01b031633146200095a57600080fd5b6000805460ff1916911515919091179055565b6004546001600160a01b03163314620009bb5760405162461bcd60e51b815260206004820152600f60248201526e3737ba103332b29036b0b730b3b2b960891b604482015260640162000468565b6005811115620009fd5760405162461bcd60e51b815260206004820152600c60248201526b0cccaca40e8dede40d0d2ced60a31b604482015260640162000468565b8060000362000a455760405162461bcd60e51b8152602060048201526013602482015272666565206d757374206265206e6f6e7a65726f60681b604482015260640162000468565b811562000a525760025550565b60035550565b600854606090821180159062000a6d57508183105b62000aab5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f52414e474560981b604482015260640162000468565b62000ab7838362000e06565b67ffffffffffffffff81111562000ad25762000ad262000e1c565b60405190808252806020026020018201604052801562000afc578160200160208202803683370190505b509050825b8281101562000b80576008818154811062000b205762000b2062000e32565b6000918252602090912001546001600160a01b03168262000b42868462000e06565b8151811062000b555762000b5562000e32565b6001600160a01b039092166020928302919091019091015262000b788162000e48565b905062000b01565b5092915050565b6005546001600160a01b0316331462000be35760405162461bcd60e51b815260206004820152601760248201527f6e6f742070656e64696e6720666565206d616e61676572000000000000000000604482015260640162000468565b600554600480546001600160a01b0319166001600160a01b03909216919091179055565b614c198062000e6583390190565b80356001600160a01b038116811462000c2d57600080fd5b919050565b60006020828403121562000c4557600080fd5b62000c508262000c15565b9392505050565b60006020828403121562000c6a57600080fd5b5035919050565b8035801515811462000c2d57600080fd5b600080600080600060a0868803121562000c9b57600080fd5b62000ca68662000c15565b945062000cb66020870162000c15565b935062000cc66040870162000c71565b92506060860135915062000cdd6080870162000c15565b90509295509295909350565b60006020828403121562000cfc57600080fd5b62000c508262000c71565b60008060006060848603121562000d1d57600080fd5b62000d288462000c15565b925062000d386020850162000c15565b915062000d486040850162000c71565b90509250925092565b6000806040838503121562000d6557600080fd5b62000d708362000c71565b946020939093013593505050565b6000806040838503121562000d9257600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b8181101562000de45783516001600160a01b03168352928401929184019160010162000dbd565b50909695505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111562000903576200090362000df0565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820162000e5d5762000e5d62000df0565b506001019056fe6101a060405260006002556000600d556000600e5560016013553480156200002657600080fd5b50336001600160a01b0316610100816001600160a01b0316815250506000806000806000336001600160a01b031663eb13c4cf6040518163ffffffff1660e01b815260040160a060405180830381865afa15801562000089573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000af919062000795565b945094509450945094508160001480620000de575061271082108015620000de57506001600160a01b03811615155b6200011f5760405162461bcd60e51b815260206004820152600d60248201526c135254d4d7d1915157d11254d5609a1b604482015260640160405180910390fd5b6001600160a01b038082166101605261018083905283151560805280851660c052851660a0526040518590859062000157906200076a565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156200018b573d6000803e3d6000fd5b506001600160a01b031660e0528215620003b757846001600160a01b03166395d89b416040518163ffffffff1660e01b81526004016000604051808303816000875af1158015620001e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200020a91908101906200083f565b846001600160a01b03166395d89b416040518163ffffffff1660e01b81526004016000604051808303816000875af11580156200024b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200027591908101906200083f565b60405160200162000288929190620008f7565b60405160208183030381529060405260009081620002a79190620009e1565b50846001600160a01b03166395d89b416040518163ffffffff1660e01b81526004016000604051808303816000875af1158015620002e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200031391908101906200083f565b846001600160a01b03166395d89b416040518163ffffffff1660e01b81526004016000604051808303816000875af115801562000354573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200037e91908101906200083f565b6040516020016200039192919062000aad565b60405160208183030381529060405260019081620003b09190620009e1565b50620005ca565b846001600160a01b03166395d89b416040518163ffffffff1660e01b81526004016000604051808303816000875af1158015620003f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200042291908101906200083f565b846001600160a01b03166395d89b416040518163ffffffff1660e01b81526004016000604051808303816000875af115801562000463573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200048d91908101906200083f565b604051602001620004a092919062000afe565b60405160208183030381529060405260009081620004bf9190620009e1565b50846001600160a01b03166395d89b416040518163ffffffff1660e01b81526004016000604051808303816000875af115801562000501573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200052b91908101906200083f565b846001600160a01b03166395d89b416040518163ffffffff1660e01b81526004016000604051808303816000875af11580156200056c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200059691908101906200083f565b604051602001620005a992919062000b5b565b60405160208183030381529060405260019081620005c89190620009e1565b505b846001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af11580156200060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000631919062000b7d565b6200063e90600a62000cbe565b6101208181525050836001600160a01b031663313ce5676040518163ffffffff1660e01b81526004016020604051808303816000875af115801562000687573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006ad919062000b7d565b620006ba90600a62000cbe565b6101405250506040805160608101825242815260006020820181815292820181815260078054600181018255925291517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68860039092029182015591517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c689830155517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a909101555062000ccf915050565b61036480620048b583390190565b80516001600160a01b03811681146200079057600080fd5b919050565b600080600080600060a08688031215620007ae57600080fd5b620007b98662000778565b9450620007c96020870162000778565b935060408601518015158114620007df57600080fd5b60608701519093509150620007f76080870162000778565b90509295509295909350565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620008365781810151838201526020016200081c565b50506000910152565b6000602082840312156200085257600080fd5b81516001600160401b03808211156200086a57600080fd5b818401915084601f8301126200087f57600080fd5b81518181111562000894576200089462000803565b604051601f8201601f19908116603f01168101908382118183101715620008bf57620008bf62000803565b81604052828152876020848701011115620008d957600080fd5b620008ec83602083016020880162000819565b979650505050505050565b6e029ba30b13632ab189020a6a690169608d1b8152600083516200092381600f85016020880162000819565b602f60f81b600f9184019182015283516200094681601084016020880162000819565b01601001949350505050565b600181811c908216806200096757607f821691505b6020821081036200098857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620009dc57600081815260208120601f850160051c81016020861015620009b75750805b601f850160051c820191505b81811015620009d857828155600101620009c3565b5050505b505050565b81516001600160401b03811115620009fd57620009fd62000803565b62000a158162000a0e845462000952565b846200098e565b602080601f83116001811462000a4d576000841562000a345750858301515b600019600386901b1c1916600185901b178555620009d8565b600085815260208120601f198616915b8281101562000a7e5788860151825594840194600190910190840162000a5d565b508582101562000a9d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6473414d4d2d60d81b81526000835162000acf81600585016020880162000819565b602f60f81b600591840191820152835162000af281600684016020880162000819565b01600601949350505050565b7002b37b630ba34b632ab189020a6a690169607d1b81526000835162000b2c81601185016020880162000819565b602f60f81b601191840191820152835162000b4f81601284016020880162000819565b01601201949350505050565b6476414d4d2d60d81b81526000835162000acf81600585016020880162000819565b60006020828403121562000b9057600080fd5b815160ff8116811462000ba257600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111562000c0057816000190482111562000be45762000be462000ba9565b8085161562000bf257918102915b93841c939080029062000bc4565b509250929050565b60008262000c195750600162000cb8565b8162000c285750600062000cb8565b816001811462000c41576002811462000c4c5762000c6c565b600191505062000cb8565b60ff84111562000c605762000c6062000ba9565b50506001821b62000cb8565b5060208310610133831016604e8410600b841016171562000c91575081810a62000cb8565b62000c9d838362000bbf565b806000190482111562000cb45762000cb462000ba9565b0290505b92915050565b600062000ba260ff84168362000c08565b60805160a05160c05160e0516101005161012051610140516101605161018051613a0962000eac600039600081816107d901528181612ed601528181612f3e01528181612f6a01528181613085015281816130ed015261311901526000818161030f01528181611c6301528181611c8b01528181612f9f015261314e01526000818161046e015281816126690152818161295301528181612a150152612b2001526000818161044b015281816126280152818161291401528181612a570152612afa01526000818161081c01528181610c6b01528181610d3c015261219801526000818161062f01528181611da00152818161248f015261255c0152600081816104f801528181610684015281816107510152818161095701528181610bff015281816115730152818161175e01528181611b85015281816122f5015261253b01526000818161034e015281816104d00152818161065f0152818161093601528181610bde015281816114dd0152818161173c01528181611b630152818161226d0152818161246e01528181612995015281816129dc01528181612ac10152612b640152600081816103d4015281816104a001528181610c3301528181610d04015281816121670152818161260001526128e00152613a096000f3fe608060405234801561001057600080fd5b506004361061028a5760003560e01c80637ecebe001161015c578063bda39cad116100ce578063d505accf11610087578063d505accf1461077b578063dd62ed3e1461078e578063ebeb31db146107b9578063f140a35a146107c1578063fb6d6659146107d4578063fff6cae9146107fb57600080fd5b8063bda39cad14610728578063bf944dbc14610731578063c245febc1461073a578063c5700a0214610743578063d21220a71461074c578063d294f0931461077357600080fd5b80639d63848a116101205780639d63848a146106515780639e8cc04b146106af5780639f767c88146106c2578063a1ac4d13146106e2578063a9059cbb14610702578063bc25cf771461071557600080fd5b80637ecebe00146105b057806389afcb44146105d05780638a7b8cf2146105f857806395d89b41146106225780639af1d35a1461062a57600080fd5b806323b872dd116102005780634d5a9f8a116101b95780634d5a9f8a1461052e578063517b3f821461054e5780635881c475146105615780635a76f25e146105745780636a6278421461057d57806370a082311461059057600080fd5b806323b872dd146103f6578063252c09d714610409578063313ce5671461041c57806332c0defd14610436578063392f37e91461043f578063443cb4bc1461052557600080fd5b80630dfe1681116102525780630dfe16811461034957806313345fe11461037057806318160ddd146103905780631df8c717146103a7578063205aabf1146103af57806322be3de1146103cf57600080fd5b8063022c0d9f1461028f57806306fdde03146102a45780630902f1ac146102c2578063095ea7b3146102e75780630d43e8ad1461030a575b600080fd5b6102a261029d36600461346d565b610803565b005b6102ac610f50565b6040516102b99190613527565b60405180910390f35b600854600954600a545b604080519384526020840192909252908201526060016102b9565b6102fa6102f536600461355a565b610fde565b60405190151581526020016102b9565b6103317f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016102b9565b6103317f000000000000000000000000000000000000000000000000000000000000000081565b61038361037e366004613586565b61104b565b6040516102b991906135c1565b61039960025481565b6040519081526020016102b9565b6102cc611247565b6103996103bd366004613605565b60106020526000908152604090205481565b6102fa7f000000000000000000000000000000000000000000000000000000000000000081565b6102fa610404366004613622565b6112b6565b6102cc610417366004613663565b61137f565b610424601281565b60405160ff90911681526020016102b9565b610399600d5481565b600854600954604080517f000000000000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060208201529081019290925260608201527f0000000000000000000000000000000000000000000000000000000000000000151560808201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660a08301527f00000000000000000000000000000000000000000000000000000000000000001660c082015260e0016102b9565b61039960085481565b61039961053c366004613605565b60116020526000908152604090205481565b61039961055c36600461355a565b6113b2565b61038361056f36600461367c565b61149a565b61039960095481565b61039961058b366004613605565b6114a9565b61039961059e366004613605565b60046020526000908152604090205481565b6103996105be366004613605565b60066020526000908152604090205481565b6105e36105de366004613605565b61170a565b604080519283526020830191909152016102b9565b610600611a27565b60408051825181526020808401519082015291810151908201526060016102b9565b6102ac611aa7565b6103317f000000000000000000000000000000000000000000000000000000000000000081565b604080516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020820152016102b9565b6103996106bd36600461367c565b611ab4565b6103996106d0366004613605565b600f6020526000908152604090205481565b6103996106f0366004613605565b60126020526000908152604090205481565b6102fa61071036600461355a565b611b21565b6102a2610723366004613605565b611b37565b610399600e5481565b610399600b5481565b610399600c5481565b610399600a5481565b6103317f000000000000000000000000000000000000000000000000000000000000000081565b6105e3611c55565b6102a26107893660046136b1565b611e4a565b61039961079c366004613728565b600360209081526000928352604080842090915290825290205481565b600754610399565b6103996107cf366004613761565b612152565b6103997f000000000000000000000000000000000000000000000000000000000000000081565b6102a2612240565b60135460011461081257600080fd5b60026013819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b187bd266040518163ffffffff1660e01b8152600401602060405180830381865afa158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190613786565b156108a657600080fd5b60008511806108b55750600084115b6108ec5760405162461bcd60e51b8152602060048201526003602482015262494f4160e81b60448201526064015b60405180910390fd5b600854600954818710801561090057508086105b6109315760405162461bcd60e51b8152602060048201526002602482015261125360f21b60448201526064016108e3565b6000807f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03898116908316148015906109a45750806001600160a01b0316896001600160a01b031614155b6109d55760405162461bcd60e51b8152602060048201526002602482015261125560f21b60448201526064016108e3565b8a156109e6576109e6828a8d61237a565b89156109f7576109f7818a8c61237a565b8615610a6457604051639a7bff7960e01b81526001600160a01b038a1690639a7bff7990610a319033908f908f908e908e906004016137a8565b600060405180830381600087803b158015610a4b57600080fd5b505af1158015610a5f573d6000803e3d6000fd5b505050505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acc91906137f4565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3791906137f4565b9250505060008985610b499190613823565b8311610b56576000610b6a565b610b608a86613823565b610b6a9084613823565b90506000610b788a86613823565b8311610b85576000610b99565b610b8f8a86613823565b610b999084613823565b90506000821180610baa5750600081115b610bdc5760405162461bcd60e51b815260206004820152600360248201526249494160e81b60448201526064016108e3565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008315610cef57604051632895a2f560e11b81527f000000000000000000000000000000000000000000000000000000000000000015156004820152610cef90612710906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063512b45ea90602401602060405180830381865afa158015610cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd691906137f4565b610ce09087613836565b610cea919061384d565b612469565b8215610dc057604051632895a2f560e11b81527f000000000000000000000000000000000000000000000000000000000000000015156004820152610dc090612710906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063512b45ea90602401602060405180830381865afa158015610d83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da791906137f4565b610db19086613836565b610dbb919061384d565b612536565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2891906137f4565b6040516370a0823160e01b81523060048201529096506001600160a01b038216906370a0823190602401602060405180830381865afa158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9391906137f4565b9450610e9f88886125fc565b610ea987876125fc565b1015610edb5760405162461bcd60e51b81526020600482015260016024820152604b60f81b60448201526064016108e3565b5050610ee984848888612748565b60408051838152602081018390529081018c9052606081018b90526001600160a01b038a169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a350506001601355505050505050505050565b60008054610f5d9061386f565b80601f0160208091040260200160405190810160405280929190818152602001828054610f899061386f565b8015610fd65780601f10610fab57610100808354040283529160200191610fd6565b820191906000526020600020905b815481529060010190602001808311610fb957829003601f168201915b505050505081565b3360008181526003602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906110399086815260200190565b60405180910390a35060015b92915050565b606060008367ffffffffffffffff811115611068576110686138a3565b604051908082528060200260200182016040528015611091578160200160208202803683370190505b506007549091506000906110a790600190613823565b905060006110b58587613836565b6110bf9083613823565b90506000805b83831015611237576110d787846138b9565b91506000600784815481106110ee576110ee6138cc565b90600052602060002090600302016000015460078481548110611113576111136138cc565b90600052602060002090600302016000015461112f9190613823565b905060008160078681548110611147576111476138cc565b9060005260206000209060030201600101546007868154811061116c5761116c6138cc565b9060005260206000209060030201600101546111889190613823565b611192919061384d565b9050600082600787815481106111aa576111aa6138cc565b906000526020600020906003020160020154600787815481106111cf576111cf6138cc565b9060005260206000209060030201600201546111eb9190613823565b6111f5919061384d565b90506112038c8e84846128dc565b888581518110611215576112156138cc565b602090810291909101015250505060010161123087846138b9565b92506110c5565b509293505050505b949350505050565b600b54600c544260008080611265600854600954600a549192909190565b9250925092508381146112ae57600061127e8286613823565b905061128a8185613836565b61129490886138b9565b96506112a08184613836565b6112aa90876138b9565b9550505b505050909192565b6001600160a01b0383166000818152600360209081526040808320338085529252822054919290919082148015906112f057506000198114155b156113665760006113018583613823565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b611371868686612bd1565b6001925050505b9392505050565b6007818154811061138f57600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b6000806113bd611a27565b90506000806113ca611247565b5084519193509150420361143257600780546113e890600290613823565b815481106113f8576113f86138cc565b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505092505b82516000906114419042613823565b90506000818560200151856114569190613823565b611460919061384d565b90506000828660400151856114759190613823565b61147f919061384d565b905061148d888a84846128dc565b9998505050505050505050565b606061123f848484600161104b565b60006013546001146114ba57600080fd5b60026013556008546009546040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561152c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155091906137f4565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156115ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de91906137f4565b905060006115ec8584613823565b905060006115fa8584613823565b600254909150600081900361163c576103e861161e61161985856125fc565b612c91565b6116289190613823565b975061163760006103e8612d01565b611671565b61166e8761164a8386613836565b611654919061384d565b8761165f8486613836565b611669919061384d565b612d94565b97505b600088116116a75760405162461bcd60e51b8152602060048201526003602482015262494c4d60e81b60448201526064016108e3565b6116b18989612d01565b6116bd85858989612748565b604080518481526020810184905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a250506001601355509395945050505050565b60008060135460011461171c57600080fd5b60026013556008546009546040516370a0823160e01b81523060048201527f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000906000906001600160a01b038416906370a0823190602401602060405180830381865afa1580156117b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d691906137f4565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611820573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184491906137f4565b3060009081526004602052604090205460025491925090806118668584613836565b611870919061384d565b99508061187d8484613836565b611887919061384d565b985060008a1180156118995750600089115b6118cb5760405162461bcd60e51b815260206004820152600360248201526224a62160e91b60448201526064016108e3565b6118d53083612daa565b6118e0868c8c61237a565b6118eb858c8b61237a565b6040516370a0823160e01b81523060048201526001600160a01b038716906370a0823190602401602060405180830381865afa15801561192f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195391906137f4565b6040516370a0823160e01b81523060048201529094506001600160a01b038616906370a0823190602401602060405180830381865afa15801561199a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119be91906137f4565b92506119cc84848a8a612748565b604080518b8152602081018b90526001600160a01b038d169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a350505050505050506001601381905550915091565b611a4b60405180606001604052806000815260200160008152602001600081525090565b60078054611a5b90600190613823565b81548110611a6b57611a6b6138cc565b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b60018054610f5d9061386f565b600080611ac4858585600161104b565b90506000805b8251811015611b0c57828181518110611ae557611ae56138cc565b602002602001015182611af891906138b9565b915080611b04816138e2565b915050611aca565b50611b17848261384d565b9695505050505050565b6000611b2e338484612bd1565b50600192915050565b601354600114611b4657600080fd5b60026013556008546040516370a0823160e01b81523060048201527f0000000000000000000000000000000000000000000000000000000000000000917f000000000000000000000000000000000000000000000000000000000000000091611c139184918691906001600160a01b038416906370a08231906024015b602060405180830381865afa158015611be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0491906137f4565b611c0e9190613823565b61237a565b6009546040516370a0823160e01b8152306004820152611c4b9183918691906001600160a01b038416906370a0823190602401611bc3565b5050600160135550565b600080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168103611d0e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a80bf3e66040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0b91906138fb565b90505b611d1781612e35565b6001600160a01b038116600090815260116020908152604080832054601290925290912054909350915082151580611d4f5750600082115b15611e45576001600160a01b0381811660009081526011602090815260408083208390556012909152808220919091555163299e7ae760e11b815233600482015260248101859052604481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063533cf5ce90606401600060405180830381600087803b158015611de657600080fd5b505af1158015611dfa573d6000803e3d6000fd5b505060408051868152602081018690523393506001600160a01b03851692507f865ca08d59f5cb456e85cd2f7ef63664ea4f73327414e9d8152c4158b0e94645910160405180910390a35b509091565b42841015611e8a5760405162461bcd60e51b815260206004820152600d60248201526c14185a5c8e8811561412549151609a1b60448201526064016108e3565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051611eba9190613918565b60408051918290038220828201825260018352603160f81b6020938401528151928301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051601f19818403018152918152815160209283012060058190556001600160a01b038a166000908152600690935290822080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918b918b918b919087611f85836138e2565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e00160405160208183030381529060405280519060200120604051602001611ffe92919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015612069573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061209f5750886001600160a01b0316816001600160a01b0316145b6120eb5760405162461bcd60e51b815260206004820152601760248201527f506169723a20494e56414c49445f5349474e415455524500000000000000000060448201526064016108e3565b6001600160a01b038981166000818152600360209081526040808320948d16808452948252918290208b905590518a81527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050505050505050565b600854600954604051632895a2f560e11b81527f0000000000000000000000000000000000000000000000000000000000000000151560048201526000929190612710907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063512b45ea90602401602060405180830381865afa1580156121e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220b91906137f4565b6122159087613836565b61221f919061384d565b6122299086613823565b9450612237858584846128dc565b95945050505050565b60135460011461224f57600080fd5b60026013556040516370a0823160e01b8152306004820152612373907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156122bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e091906137f4565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612344573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236891906137f4565b600854600954612748565b6001601355565b6000836001600160a01b03163b1161239157600080fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916123ed91906139b7565b6000604051808303816000865af19150503d806000811461242a576040519150601f19603f3d011682016040523d82523d6000602084013e61242f565b606091505b50915091508180156124595750805115806124595750808060200190518101906124599190613786565b61246257600080fd5b5050505050565b6124b47f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008361237a565b6002546000906124cc83670de0b6b3a7640000613836565b6124d6919061384d565b905080156124f65780600d60008282546124f091906138b9565b90915550505b604080518381526000602082015233917f112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a860291015b60405180910390a25050565b6125817f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008361237a565b60025460009061259983670de0b6b3a7640000613836565b6125a3919061384d565b905080156125c35780600e60008282546125bd91906138b9565b90915550505b60408051600081526020810184905233917f112c256902bf554b6ed882d2936687aaeb4225e8cd5b51303c90ca6cf43a8602910161252a565b60007f0000000000000000000000000000000000000000000000000000000000000000156127375760007f000000000000000000000000000000000000000000000000000000000000000061265985670de0b6b3a7640000613836565b612663919061384d565b905060007f000000000000000000000000000000000000000000000000000000000000000061269a85670de0b6b3a7640000613836565b6126a4919061384d565b90506000670de0b6b3a76400006126bb8385613836565b6126c5919061384d565b90506000670de0b6b3a76400006126dc8480613836565b6126e6919061384d565b670de0b6b3a76400006126f98680613836565b612703919061384d565b61270d91906138b9565b9050670de0b6b3a76400006127228284613836565b61272c919061384d565b945050505050611045565b6127418284613836565b9050611045565b600a54429060009061275a9083613823565b905060008111801561276b57508315155b801561277657508215155b156127bd576127858185613836565b600b600082825461279691906138b9565b909155506127a690508184613836565b600c60008282546127b791906138b9565b90915550505b60006127c7611a27565b80519091506127d69084613823565b915061070882111561288b5760408051606081018252848152600b5460208201908152600c549282019283526007805460018101825560009190915291517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688600390930292830155517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68982015590517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a909101555b60088790556009869055600a83905560408051888152602081018890527fcf2aa50876cdfbb541206f89af0ee78d44a2abf8d328e37fa4917f982149848a910160405180910390a150505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000015612b5f57600061291084846125fc565b90507f000000000000000000000000000000000000000000000000000000000000000061294585670de0b6b3a7640000613836565b61294f919061384d565b93507f000000000000000000000000000000000000000000000000000000000000000061298484670de0b6b3a7640000613836565b61298e919061384d565b92506000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b0316146129d35784866129d6565b85855b915091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316876001600160a01b031614612a55577f0000000000000000000000000000000000000000000000000000000000000000612a4689670de0b6b3a7640000613836565b612a50919061384d565b612a92565b7f0000000000000000000000000000000000000000000000000000000000000000612a8889670de0b6b3a7640000613836565b612a92919061384d565b97506000612aaa612aa3848b6138b9565b8584613241565b612ab49083613823565b9050670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316896001600160a01b031614612b1e577f0000000000000000000000000000000000000000000000000000000000000000612b40565b7f00000000000000000000000000000000000000000000000000000000000000005b612b4a9083613836565b612b54919061384d565b94505050505061123f565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316866001600160a01b031614612ba2578385612ba5565b84845b9092509050612bb487836138b9565b612bbe8289613836565b612bc8919061384d565b9250505061123f565b612bda83612e35565b612be382612e35565b6001600160a01b03831660009081526004602052604081208054839290612c0b908490613823565b90915550506001600160a01b03821660009081526004602052604081208054839290612c389084906138b9565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612c8491815260200190565b60405180910390a3505050565b60006003821115612cf25750806000612cab60028361384d565b612cb69060016138b9565b90505b81811015612cec57905080600281612cd1818661384d565b612cdb91906138b9565b612ce5919061384d565b9050612cb9565b50919050565b8115612cfc575060015b919050565b612d0a82612e35565b8060026000828254612d1c91906138b9565b90915550506001600160a01b03821660009081526004602052604081208054839290612d499084906138b9565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6000818310612da35781611378565b5090919050565b612db382612e35565b8060026000828254612dc59190613823565b90915550506001600160a01b03821660009081526004602052604081208054839290612df2908490613823565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001612d88565b6001600160a01b038116600090815260046020526040902054801561320f576001600160a01b0382166000908152600f60209081526040808320805460108085529285208054600d54600e54948190559490955282905593612e978584613823565b90506000612ea58584613823565b90508115613056576000670de0b6b3a7640000612ec2848a613836565b612ecc919061384d565b9050612710612efb7f000000000000000000000000000000000000000000000000000000000000000083613836565b612f05919061384d565b612f0f9082613823565b6001600160a01b038a1660009081526011602052604081208054909190612f379084906138b9565b90915550507f00000000000000000000000000000000000000000000000000000000000000001561305457612710612f8f7f000000000000000000000000000000000000000000000000000000000000000083613836565b612f99919061384d565b601160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a80bf3e66040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301f91906138fb565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461304e91906138b9565b90915550505b505b8015613205576000670de0b6b3a7640000613071838a613836565b61307b919061384d565b90506127106130aa7f000000000000000000000000000000000000000000000000000000000000000083613836565b6130b4919061384d565b6130be9082613823565b6001600160a01b038a16600090815260126020526040812080549091906130e69084906138b9565b90915550507f0000000000000000000000000000000000000000000000000000000000000000156132035761271061313e7f000000000000000000000000000000000000000000000000000000000000000083613836565b613148919061384d565b601260007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a80bf3e66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ce91906138fb565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546131fd91906138b9565b90915550505b505b5050505050505050565b600d546001600160a01b0383166000908152600f6020908152604080832093909355600e546010909152919020555050565b6000805b60ff8110156133475782600061325b8783613350565b9050858110156132ab57600061327188876133ed565b61327b8389613823565b61328d90670de0b6b3a7640000613836565b613297919061384d565b90506132a381876138b9565b9550506132ed565b60006132b788876133ed565b6132c18884613823565b6132d390670de0b6b3a7640000613836565b6132dd919061384d565b90506132e98187613823565b9550505b818511156133165760016133018387613823565b1161331157849350505050611378565b613332565b60016133228684613823565b1161333257849350505050611378565b5050808061333f906138e2565b915050613245565b50909392505050565b6000670de0b6b3a7640000828185816133698280613836565b613373919061384d565b61337d9190613836565b613387919061384d565b6133919190613836565b61339b919061384d565b670de0b6b3a76400008084816133b18280613836565b6133bb919061384d565b6133c59190613836565b6133cf919061384d565b6133d99086613836565b6133e3919061384d565b61137891906138b9565b6000670de0b6b3a764000083816134048280613836565b61340e919061384d565b6134189190613836565b613422919061384d565b670de0b6b3a7640000806134368580613836565b613440919061384d565b61344b866003613836565b6133d99190613836565b6001600160a01b038116811461346a57600080fd5b50565b60008060008060006080868803121561348557600080fd5b8535945060208601359350604086013561349e81613455565b9250606086013567ffffffffffffffff808211156134bb57600080fd5b818801915088601f8301126134cf57600080fd5b8135818111156134de57600080fd5b8960208285010111156134f057600080fd5b9699959850939650602001949392505050565b60005b8381101561351e578181015183820152602001613506565b50506000910152565b6020815260008251806020840152613546816040850160208701613503565b601f01601f19169190910160400192915050565b6000806040838503121561356d57600080fd5b823561357881613455565b946020939093013593505050565b6000806000806080858703121561359c57600080fd5b84356135a781613455565b966020860135965060408601359560600135945092505050565b6020808252825182820181905260009190848201906040850190845b818110156135f9578351835292840192918401916001016135dd565b50909695505050505050565b60006020828403121561361757600080fd5b813561137881613455565b60008060006060848603121561363757600080fd5b833561364281613455565b9250602084013561365281613455565b929592945050506040919091013590565b60006020828403121561367557600080fd5b5035919050565b60008060006060848603121561369157600080fd5b833561369c81613455565b95602085013595506040909401359392505050565b600080600080600080600060e0888a0312156136cc57600080fd5b87356136d781613455565b965060208801356136e781613455565b95506040880135945060608801359350608088013560ff8116811461370b57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561373b57600080fd5b823561374681613455565b9150602083013561375681613455565b809150509250929050565b6000806040838503121561377457600080fd5b82359150602083013561375681613455565b60006020828403121561379857600080fd5b8151801515811461137857600080fd5b60018060a01b038616815284602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006020828403121561380657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156110455761104561380d565b80820281158282048414176110455761104561380d565b60008261386a57634e487b7160e01b600052601260045260246000fd5b500490565b600181811c9082168061388357607f821691505b602082108103612cec57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b808201808211156110455761104561380d565b634e487b7160e01b600052603260045260246000fd5b6000600182016138f4576138f461380d565b5060010190565b60006020828403121561390d57600080fd5b815161137881613455565b600080835481600182811c91508083168061393457607f831692505b6020808410820361395357634e487b7160e01b86526022600452602486fd5b818015613967576001811461397c576139a9565b60ff19861689528415158502890196506139a9565b60008a81526020902060005b868110156139a15781548b820152908501908301613988565b505084890196505b509498975050505050505050565b600082516139c9818460208701613503565b919091019291505056fea26469706673582212205c2340f2ff25d0648b2ca54cf9cf5112139f13dc03943d832d1c2323b97cc43b64736f6c6343000814003360e060405234801561001057600080fd5b5060405161036438038061036483398101604081905261002f91610066565b336080526001600160a01b0391821660a0521660c052610099565b80516001600160a01b038116811461006157600080fd5b919050565b6000806040838503121561007957600080fd5b6100828361004a565b91506100906020840161004a565b90509250929050565b60805160a05160c05161029f6100c5600039600060b6015260006085015260006050015261029f6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063533cf5ce14610030575b600080fd5b61004361003e3660046101d0565b610045565b005b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461007a57600080fd5b81156100ab576100ab7f000000000000000000000000000000000000000000000000000000000000000084846100e1565b80156100dc576100dc7f000000000000000000000000000000000000000000000000000000000000000084836100e1565b505050565b6000836001600160a01b03163b116100f857600080fd5b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b17905291516000928392908716916101549190610211565b6000604051808303816000865af19150503d8060008114610191576040519150601f19603f3d011682016040523d82523d6000602084013e610196565b606091505b50915091508180156101c05750805115806101c05750808060200190518101906101c09190610240565b6101c957600080fd5b5050505050565b6000806000606084860312156101e557600080fd5b83356001600160a01b03811681146101fc57600080fd5b95602085013595506040909401359392505050565b6000825160005b818110156102325760208186018101518583015201610218565b506000920191825250919050565b60006020828403121561025257600080fd5b8151801515811461026257600080fd5b939250505056fea264697066735822122018e0b6fd09fee6f66fed2e5d04b50e3c6109e5d5b9c896b0ffc3bc90ce8c017c64736f6c63430008140033a26469706673582212201e63bfcf04021b82013c461a17c916c17f1d4c8e2c1c6bc946635a98bf5daecc64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5549,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "isPaused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5551,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "pauser",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5553,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "pendingPauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5555,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "stableFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5557,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "volatileFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5562,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "feeManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5564,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "pendingFeeManager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5566,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "router",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5574,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_address)))"
      },
      {
        "astId": 5577,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5581,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "isPair",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5583,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "_temp0",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5585,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "_temp1",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 5587,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "_temp",
        "offset": 20,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 5589,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "_tempP",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5591,
        "contract": "contracts/factories/PairFactory.sol:PairFactory",
        "label": "_tempF",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_bool,t_address)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(bool => address)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_bool,t_address))"
      },
      "t_mapping(t_address,t_mapping(t_bool,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bool => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_address)"
      },
      "t_mapping(t_bool,t_address)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}