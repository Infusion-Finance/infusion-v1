{
  "address": "0x447259cab5eA4A234650D012bEbDAc74b4B4b1dF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "getMinimumValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "getSample",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "stable",
          "type": "bool"
        }
      ],
      "name": "getTradeDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        }
      ],
      "name": "getTradeDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb0e9223eb10a2a791eb7990b41a16037120828927c979d412ca0e82a766c3e7",
  "receipt": {
    "to": null,
    "from": "0x628C4951a34d8f1990940dbDa33532b0cf5CF164",
    "contractAddress": "0x447259cab5eA4A234650D012bEbDAc74b4B4b1dF",
    "transactionIndex": 2,
    "gasUsed": "896303",
    "logsBloom": "0x
    "blockHash": "0x5c0e10b00c6d1e4ed6f0f47323668d20e11d8faa19d7a6dbcad2c201a0a646cf",
    "transactionHash": "0xbb0e9223eb10a2a791eb7990b41a16037120828927c979d412ca0e82a766c3e7",
    "logs": [],
    "blockNumber": 11704808,
    "cumulativeGasUsed": "989562",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1E891C9F96DcA29Da8B97bE3403D16135EBe8028"
  ],
  "numDeployments": 1,
  "solcInputHash": "397b05948f00496dad26cffe44d47bb4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getMinimumValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getSample\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stable\",\"type\":\"bool\"}],\"name\":\"getTradeDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"getTradeDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InfusionLibrary.sol\":\"InfusionLibrary\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/InfusionLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"contracts/interfaces/IPair.sol\\\";\\nimport \\\"contracts/interfaces/IRouter.sol\\\";\\n\\ncontract InfusionLibrary {\\n    IRouter internal immutable router;\\n\\n    constructor(address _router) {\\n        router = IRouter(_router);\\n    }\\n\\n    function _f(uint x0, uint y) internal pure returns (uint) {\\n        return\\n            (x0 * ((((y * y) / 1e18) * y) / 1e18)) /\\n            1e18 +\\n            (((((x0 * x0) / 1e18) * x0) / 1e18) * y) /\\n            1e18;\\n    }\\n\\n    function _d(uint x0, uint y) internal pure returns (uint) {\\n        return\\n            (3 * x0 * ((y * y) / 1e18)) /\\n            1e18 +\\n            ((((x0 * x0) / 1e18) * x0) / 1e18);\\n    }\\n\\n    function _get_y(uint x0, uint xy, uint y) internal pure returns (uint) {\\n        for (uint i = 0; i < 255; i++) {\\n            uint y_prev = y;\\n            uint k = _f(x0, y);\\n            if (k < xy) {\\n                uint dy = ((xy - k) * 1e18) / _d(x0, y);\\n                y = y + dy;\\n            } else {\\n                uint dy = ((k - xy) * 1e18) / _d(x0, y);\\n                y = y - dy;\\n            }\\n            if (y > y_prev) {\\n                if (y - y_prev <= 1) {\\n                    return y;\\n                }\\n            } else {\\n                if (y_prev - y <= 1) {\\n                    return y;\\n                }\\n            }\\n        }\\n        return y;\\n    }\\n\\n    function getTradeDiff(\\n        uint amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        bool stable\\n    ) external view returns (uint a, uint b) {\\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, ) = IPair(\\n            router.pairFor(tokenIn, tokenOut, stable)\\n        ).metadata();\\n        uint sample = tokenIn == t0 ? (r0 * dec1) / r1 : (r1 * dec0) / r0;\\n        a =\\n            (_getAmountOut(sample, tokenIn, r0, r1, t0, dec0, dec1, st) *\\n                1e18) /\\n            sample;\\n        b =\\n            (_getAmountOut(amountIn, tokenIn, r0, r1, t0, dec0, dec1, st) *\\n                1e18) /\\n            amountIn;\\n    }\\n\\n    function getTradeDiff(\\n        uint amountIn,\\n        address tokenIn,\\n        address pair\\n    ) external view returns (uint a, uint b) {\\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, ) = IPair(\\n            pair\\n        ).metadata();\\n        uint sample = tokenIn == t0 ? (r0 * dec1) / r1 : (r1 * dec0) / r0;\\n        a =\\n            (_getAmountOut(sample, tokenIn, r0, r1, t0, dec0, dec1, st) *\\n                1e18) /\\n            sample;\\n        b =\\n            (_getAmountOut(amountIn, tokenIn, r0, r1, t0, dec0, dec1, st) *\\n                1e18) /\\n            amountIn;\\n    }\\n\\n    function getSample(\\n        address tokenIn,\\n        address tokenOut,\\n        bool stable\\n    ) external view returns (uint) {\\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, ) = IPair(\\n            router.pairFor(tokenIn, tokenOut, stable)\\n        ).metadata();\\n        uint sample = tokenIn == t0 ? (r0 * dec1) / r1 : (r1 * dec0) / r0;\\n        return\\n            (_getAmountOut(sample, tokenIn, r0, r1, t0, dec0, dec1, st) *\\n                1e18) / sample;\\n    }\\n\\n    function getMinimumValue(\\n        address tokenIn,\\n        address tokenOut,\\n        bool stable\\n    ) external view returns (uint, uint, uint) {\\n        (uint dec0, uint dec1, uint r0, uint r1, , address t0, ) = IPair(\\n            router.pairFor(tokenIn, tokenOut, stable)\\n        ).metadata();\\n        uint sample = tokenIn == t0 ? (r0 * dec1) / r1 : (r1 * dec0) / r0;\\n        return (sample, r0, r1);\\n    }\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        address tokenIn,\\n        address tokenOut,\\n        bool stable\\n    ) external view returns (uint) {\\n        (uint dec0, uint dec1, uint r0, uint r1, bool st, address t0, ) = IPair(\\n            router.pairFor(tokenIn, tokenOut, stable)\\n        ).metadata();\\n        return _getAmountOut(amountIn, tokenIn, r0, r1, t0, dec0, dec1, st);\\n    }\\n\\n    function _getAmountOut(\\n        uint amountIn,\\n        address tokenIn,\\n        uint _reserve0,\\n        uint _reserve1,\\n        address token0,\\n        uint decimals0,\\n        uint decimals1,\\n        bool stable\\n    ) internal pure returns (uint) {\\n        if (stable) {\\n            uint xy = _k(_reserve0, _reserve1, stable, decimals0, decimals1);\\n            _reserve0 = (_reserve0 * 1e18) / decimals0;\\n            _reserve1 = (_reserve1 * 1e18) / decimals1;\\n            (uint reserveA, uint reserveB) = tokenIn == token0\\n                ? (_reserve0, _reserve1)\\n                : (_reserve1, _reserve0);\\n            amountIn = tokenIn == token0\\n                ? (amountIn * 1e18) / decimals0\\n                : (amountIn * 1e18) / decimals1;\\n            uint y = reserveB - _get_y(amountIn + reserveA, xy, reserveB);\\n            return (y * (tokenIn == token0 ? decimals1 : decimals0)) / 1e18;\\n        } else {\\n            (uint reserveA, uint reserveB) = tokenIn == token0\\n                ? (_reserve0, _reserve1)\\n                : (_reserve1, _reserve0);\\n            return (amountIn * reserveB) / (reserveA + amountIn);\\n        }\\n    }\\n\\n    function _k(\\n        uint x,\\n        uint y,\\n        bool stable,\\n        uint decimals0,\\n        uint decimals1\\n    ) internal pure returns (uint) {\\n        if (stable) {\\n            uint _x = (x * 1e18) / decimals0;\\n            uint _y = (y * 1e18) / decimals1;\\n            uint _a = (_x * _y) / 1e18;\\n            uint _b = ((_x * _x) / 1e18 + (_y * _y) / 1e18);\\n            return (_a * _b) / 1e18; // x3y+y3x >= k\\n        } else {\\n            return x * y; // xy >= k\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb648ffd334613b8f8eadf4f06989f270ea55b1804f2d4784537b6939cb85f9bc\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IPair {\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint dec0,\\n            uint dec1,\\n            uint r0,\\n            uint r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        );\\n    function claimFees() external returns (uint, uint);\\n    function tokens() external view returns (address, address);\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint amount\\n    ) external returns (bool);\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function getReserves()\\n        external\\n        view\\n        returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x151c53cff492ffda368d1ad6ef1e2fe6dcc71f84aa3b0cdf1cfab1cb5b7c1703\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IRouter {\\n    function pairFor(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external view returns (address pair);\\n}\\n\",\"keccak256\":\"0x8ab53236c7181ec603f5418c27f6935f7e568fa4bb8fdd377e80ca711f197db6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063525007331461005c578063865db5e21461008f578063be3b428e146100b7578063da214231146100d8578063ec323c00146100eb575b600080fd5b61006f61006a366004610cef565b6100fe565b604080519384526020840192909252908201526060015b60405180910390f35b6100a261009d366004610d3a565b610265565b60408051928352602083019190915201610086565b6100ca6100c5366004610cef565b61042a565b604051908152602001610086565b6100ca6100e6366004610d3a565b6105be565b6100a26100f9366004610d8d565b6106e7565b6000806000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634c1ee03e8c8c8c6040518463ffffffff1660e01b815260040161015a93929190610dc4565b602060405180830381865afa158015610177573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019b9190610de8565b6001600160a01b031663392f37e96040518163ffffffff1660e01b815260040160e060405180830381865afa1580156101d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fc9190610e05565b5095505094509450945094506000816001600160a01b03168c6001600160a01b03161461023d578361022e8785610e8f565b6102389190610ea6565b610252565b826102488686610e8f565b6102529190610ea6565b9c939b5091995091975050505050505050565b6000806000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634c1ee03e8c8c8c6040518463ffffffff1660e01b81526004016102c193929190610dc4565b602060405180830381865afa1580156102de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103029190610de8565b6001600160a01b031663392f37e96040518163ffffffff1660e01b815260040160e060405180830381865afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103639190610e05565b509550955095509550955095506000816001600160a01b03168c6001600160a01b0316146103a557846103968886610e8f565b6103a09190610ea6565b6103ba565b836103b08787610e8f565b6103ba9190610ea6565b9050806103cd828e8888878d8d8b61081b565b6103df90670de0b6b3a7640000610e8f565b6103e99190610ea6565b98508c6103fc8e8e8888878d8d8b61081b565b61040e90670de0b6b3a7640000610e8f565b6104189190610ea6565b97505050505050505094509492505050565b60008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634c1ee03e8b8b8b6040518463ffffffff1660e01b815260040161048593929190610dc4565b602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190610de8565b6001600160a01b031663392f37e96040518163ffffffff1660e01b815260040160e060405180830381865afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105279190610e05565b509550955095509550955095506000816001600160a01b03168b6001600160a01b031614610569578461055a8886610e8f565b6105649190610ea6565b61057e565b836105748787610e8f565b61057e9190610ea6565b905080610591828d8888878d8d8b61081b565b6105a390670de0b6b3a7640000610e8f565b6105ad9190610ea6565b9750505050505050505b9392505050565b60008060008060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634c1ee03e8b8b8b6040518463ffffffff1660e01b815260040161061993929190610dc4565b602060405180830381865afa158015610636573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065a9190610de8565b6001600160a01b031663392f37e96040518163ffffffff1660e01b815260040160e060405180830381865afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb9190610e05565b509550955095509550955095506106d88b8b8686858b8b8961081b565b9b9a5050505050505050505050565b600080600080600080600080886001600160a01b031663392f37e96040518163ffffffff1660e01b815260040160e060405180830381865afa158015610731573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107559190610e05565b509550955095509550955095506000816001600160a01b03168b6001600160a01b03161461079757846107888886610e8f565b6107929190610ea6565b6107ac565b836107a28787610e8f565b6107ac9190610ea6565b9050806107bf828d8888878d8d8b61081b565b6107d190670de0b6b3a7640000610e8f565b6107db9190610ea6565b98508b6107ee8d8d8888878d8d8b61081b565b61080090670de0b6b3a7640000610e8f565b61080a9190610ea6565b975050505050505050935093915050565b6000811561096157600061083288888588886109bb565b90508461084789670de0b6b3a7640000610e8f565b6108519190610ea6565b97508361086688670de0b6b3a7640000610e8f565b6108709190610ea6565b9650600080876001600160a01b03168b6001600160a01b03161461089557888a610898565b89895b91509150876001600160a01b03168b6001600160a01b0316146108d757856108c88d670de0b6b3a7640000610e8f565b6108d29190610ea6565b6108f4565b866108ea8d670de0b6b3a7640000610e8f565b6108f49190610ea6565b9b50600061090c610905848f610ec8565b8584610aac565b6109169083610edb565b9050670de0b6b3a7640000896001600160a01b03168d6001600160a01b0316146109405788610942565b875b61094c9083610e8f565b6109569190610ea6565b9450505050506109af565b600080866001600160a01b03168a6001600160a01b031614610984578789610987565b88885b90925090506109968b83610ec8565b6109a0828d610e8f565b6109aa9190610ea6565b925050505b98975050505050505050565b60008315610a96576000836109d888670de0b6b3a7640000610e8f565b6109e29190610ea6565b90506000836109f988670de0b6b3a7640000610e8f565b610a039190610ea6565b90506000670de0b6b3a7640000610a1a8385610e8f565b610a249190610ea6565b90506000670de0b6b3a7640000610a3b8480610e8f565b610a459190610ea6565b670de0b6b3a7640000610a588680610e8f565b610a629190610ea6565b610a6c9190610ec8565b9050670de0b6b3a7640000610a818284610e8f565b610a8b9190610ea6565b945050505050610aa3565b610aa08587610e8f565b90505b95945050505050565b6000805b60ff811015610bb257826000610ac68783610bbb565b905085811015610b16576000610adc8887610c61565b610ae68389610edb565b610af890670de0b6b3a7640000610e8f565b610b029190610ea6565b9050610b0e8187610ec8565b955050610b58565b6000610b228887610c61565b610b2c8884610edb565b610b3e90670de0b6b3a7640000610e8f565b610b489190610ea6565b9050610b548187610edb565b9550505b81851115610b81576001610b6c8387610edb565b11610b7c578493505050506105b7565b610b9d565b6001610b8d8684610edb565b11610b9d578493505050506105b7565b50508080610baa90610eee565b915050610ab0565b50909392505050565b6000670de0b6b3a764000082818581610bd48280610e8f565b610bde9190610ea6565b610be89190610e8f565b610bf29190610ea6565b610bfc9190610e8f565b610c069190610ea6565b670de0b6b3a7640000808481610c1c8280610e8f565b610c269190610ea6565b610c309190610e8f565b610c3a9190610ea6565b610c449086610e8f565b610c4e9190610ea6565b610c589190610ec8565b90505b92915050565b6000670de0b6b3a76400008381610c788280610e8f565b610c829190610ea6565b610c8c9190610e8f565b610c969190610ea6565b670de0b6b3a764000080610caa8580610e8f565b610cb49190610ea6565b610cbf866003610e8f565b610c449190610e8f565b6001600160a01b0381168114610cde57600080fd5b50565b8015158114610cde57600080fd5b600080600060608486031215610d0457600080fd5b8335610d0f81610cc9565b92506020840135610d1f81610cc9565b91506040840135610d2f81610ce1565b809150509250925092565b60008060008060808587031215610d5057600080fd5b843593506020850135610d6281610cc9565b92506040850135610d7281610cc9565b91506060850135610d8281610ce1565b939692955090935050565b600080600060608486031215610da257600080fd5b833592506020840135610db481610cc9565b91506040840135610d2f81610cc9565b6001600160a01b039384168152919092166020820152901515604082015260600190565b600060208284031215610dfa57600080fd5b81516105b781610cc9565b600080600080600080600060e0888a031215610e2057600080fd5b875196506020880151955060408801519450606088015193506080880151610e4781610ce1565b60a0890151909350610e5881610cc9565b60c0890151909250610e6981610cc9565b8091505092959891949750929550565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c5b57610c5b610e79565b600082610ec357634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610c5b57610c5b610e79565b81810381811115610c5b57610c5b610e79565b600060018201610f0057610f00610e79565b506001019056fea26469706673582212208886929176c6480003ed077fc7681b5e7c5e2972aa4ac82d98b59d1f8942d65c64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}