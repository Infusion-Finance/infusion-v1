{
  "address": "0x2d259c6C1A7aCB410326Ca662a26Ca3fDDb890BA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLockDays",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenLocker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeDistributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockerFeesP",
          "type": "uint256"
        }
      ],
      "name": "LockCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptLockManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockerFeesP",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "feeDistributor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeDistributors",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitFeeDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitTokenLocker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "initRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLockDays",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingLockManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockManager",
          "type": "address"
        }
      ],
      "name": "setLockManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxLockDays",
          "type": "uint256"
        }
      ],
      "name": "setMaxLockDays",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenLockers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf0cb598e66dbf0a9221b5d29b44a3452c6048e01597143abc04c1dd30ff86a9",
  "receipt": {
    "to": null,
    "from": "0x628C4951a34d8f1990940dbDa33532b0cf5CF164",
    "contractAddress": "0x2d259c6C1A7aCB410326Ca662a26Ca3fDDb890BA",
    "transactionIndex": 8,
    "gasUsed": "3018956",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd35418bf4763f5158c8235653161a7a2eca56d87cb176e42c62f598550f5b613",
    "transactionHash": "0xbf0cb598e66dbf0a9221b5d29b44a3452c6048e01597143abc04c1dd30ff86a9",
    "logs": [],
    "blockNumber": 11704801,
    "cumulativeGasUsed": "3931155",
    "status": 1,
    "byzantium": true
  },
  "args": [
    90
  ],
  "numDeployments": 1,
  "solcInputHash": "397b05948f00496dad26cffe44d47bb4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLockDays\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenLocker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockerFeesP\",\"type\":\"uint256\"}],\"name\":\"LockCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptLockManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockerFeesP\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeDistributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeDistributors\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitFeeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitTokenLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"initRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingLockManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockManager\",\"type\":\"address\"}],\"name\":\"setLockManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxLockDays\",\"type\":\"uint256\"}],\"name\":\"setMaxLockDays\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/LockFactory.sol\":\"LockFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"contracts/FeeDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ITokenLocker.sol\\\";\\nimport \\\"./interfaces/IPair.sol\\\";\\nimport \\\"./interfaces/ILockFactory.sol\\\";\\n\\ncontract FeeDistributor {\\n    using SafeERC20 for IERC20;\\n\\n    struct StreamData {\\n        uint256 start;\\n        uint256 amount;\\n        uint256 claimed;\\n    }\\n\\n    // Fees are transferred into this contract as they are collected, and in the same tokens\\n    // that they are collected in. The total amount collected each day is recorded in\\n    // `dailyFeeAmounts`. At the end of a day, the fee amounts are streamed out over\\n    // the following day based on each user's lock weight at the end of that day. Data\\n    // about the active stream for each token is tracked in `activeUserStream`\\n\\n    // fee token -> day -> total amount received that day\\n    mapping(address => mapping(uint256 => uint256)) public dailyFeeAmounts;\\n    // user -> fee token -> data about the active stream\\n    mapping(address => mapping(address => StreamData)) activeUserStream;\\n\\n    // account earning rewards => receiver of rewards for this account\\n    // if receiver is set to address(0), rewards are paid to the earner\\n    // this is used to aid 3rd party contract integrations\\n    mapping(address => address) public claimReceiver;\\n\\n    // when set to true, other accounts cannot call `claim` on behalf of an account\\n    mapping(address => bool) public blockThirdPartyActions;\\n\\n    uint256 public immutable startTime;\\n    ITokenLocker public immutable tokenLocker;\\n    IPair public immutable pool;\\n\\n    event FeesReceived(\\n        address caller,\\n        address indexed token0,\\n        address indexed token1,\\n        uint256 indexed day,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event FeesClaimed(\\n        address caller,\\n        address indexed account,\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    constructor() {\\n        ITokenLocker _tokenLocker = ITokenLocker(\\n            ILockFactory(msg.sender).getInitFeeDistributor()\\n        );\\n        tokenLocker = _tokenLocker;\\n        startTime = _tokenLocker.startTime();\\n        pool = IPair(_tokenLocker.stakingToken());\\n    }\\n\\n    function setClaimReceiver(address _receiver) external {\\n        claimReceiver[msg.sender] = _receiver;\\n    }\\n\\n    function setBlockThirdPartyActions(bool _block) external {\\n        blockThirdPartyActions[msg.sender] = _block;\\n    }\\n\\n    function getDay() public view returns (uint256) {\\n        if (startTime == 0) return 0;\\n        return (block.timestamp - startTime) / 1 days;\\n    }\\n\\n    /**\\n        @notice Deposit pool fees into the contract, to be distributed to LP lockers\\n     */\\n    function depositFees() external returns (bool) {\\n        (uint256 amount0, uint256 amount1) = pool.claimFees();\\n        require(amount0 != 0 || amount1 != 0, \\\"No fees to claim from a pair\\\");\\n\\n        (address token0, address token1) = pool.tokens();\\n        uint256 day = getDay();\\n\\n        dailyFeeAmounts[token0][day] += amount0;\\n        dailyFeeAmounts[token1][day] += amount1;\\n\\n        emit FeesReceived(msg.sender, token0, token1, day, amount0, amount1);\\n        return true;\\n    }\\n\\n    /**\\n        @notice Get an array of claimable amounts of accrued pool tokens fees\\n        @param _user Address to query claimable amounts for\\n     */\\n    function claimable(\\n        address _user\\n    ) external view returns (uint256 amount0, uint256 amount1) {\\n        (address token0, address token1) = pool.tokens();\\n        (amount0, ) = _getClaimable(_user, token0);\\n        (amount1, ) = _getClaimable(_user, token1);\\n    }\\n\\n    /**\\n        @notice Claim accrued protocol fees according to a locked balance in `TokenLocker`.\\n        @dev Fees are claimable up to the end of the previous day. Claimable fees from more\\n             than one day ago are released immediately, fees from the previous day are streamed.\\n        @param _user Address to claim for. Any account can trigger a claim for any other account.\\n        @param _tokens Array of tokens to claim for.\\n        @return claimedAmounts Array of amounts claimed.\\n     */\\n    function claim(\\n        address _user,\\n        address[] calldata _tokens\\n    ) external returns (uint256[] memory claimedAmounts) {\\n        if (msg.sender != _user) {\\n            require(\\n                !blockThirdPartyActions[_user],\\n                \\\"Cannot claim on behalf of this account\\\"\\n            );\\n        }\\n        address receiver = claimReceiver[_user];\\n        if (receiver == address(0)) receiver = _user;\\n        claimedAmounts = new uint256[](_tokens.length);\\n        StreamData memory stream;\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address token = _tokens[i];\\n            (claimedAmounts[i], stream) = _getClaimable(_user, token);\\n            activeUserStream[_user][token] = stream;\\n            IERC20(token).safeTransfer(receiver, claimedAmounts[i]);\\n            emit FeesClaimed(\\n                msg.sender,\\n                _user,\\n                receiver,\\n                token,\\n                claimedAmounts[i]\\n            );\\n        }\\n        return claimedAmounts;\\n    }\\n\\n    function _getClaimable(\\n        address _user,\\n        address _token\\n    ) internal view returns (uint256, StreamData memory) {\\n        uint256 claimableday = getDay();\\n\\n        if (claimableday == 0) {\\n            // the first full day hasn't completed yet\\n            return (0, StreamData({start: startTime, amount: 0, claimed: 0}));\\n        }\\n\\n        // the previous day is the claimable one\\n        claimableday -= 1;\\n        StreamData memory stream = activeUserStream[_user][_token];\\n        uint256 lastClaimday;\\n        if (stream.start == 0) {\\n            lastClaimday = 0;\\n        } else {\\n            lastClaimday = (stream.start - startTime) / 1 days;\\n        }\\n\\n        uint256 amount;\\n        if (claimableday == lastClaimday) {\\n            // special case: claim is happening in the same day as a previous claim\\n            uint256 previouslyClaimed = stream.claimed;\\n            stream = _buildStreamData(_user, _token, claimableday);\\n            amount = stream.claimed - previouslyClaimed;\\n            return (amount, stream);\\n        }\\n\\n        if (stream.start > 0) {\\n            // if there is a partially claimed day, get the unclaimed amount and increment\\n            // `lastClaimWeeek` so we begin iteration on the following day\\n            amount = stream.amount - stream.claimed;\\n            lastClaimday += 1;\\n        }\\n\\n        // iterate over days that have passed fully without any claims\\n        for (uint256 i = lastClaimday; i < claimableday; i++) {\\n            (uint256 userWeight, uint256 totalWeight) = tokenLocker.dailyWeight(\\n                _user,\\n                i\\n            );\\n            if (userWeight == 0) continue;\\n            amount += (dailyFeeAmounts[_token][i] * userWeight) / totalWeight;\\n        }\\n\\n        // add a partial amount for the active day\\n        stream = _buildStreamData(_user, _token, claimableday);\\n\\n        return (amount + stream.claimed, stream);\\n    }\\n\\n    function _buildStreamData(\\n        address _user,\\n        address _token,\\n        uint256 _day\\n    ) internal view returns (StreamData memory) {\\n        uint256 start = startTime + _day * 1 days;\\n        (uint256 userWeight, uint256 totalWeight) = tokenLocker.dailyWeight(\\n            _user,\\n            _day\\n        );\\n        uint256 amount;\\n        uint256 claimed;\\n        if (userWeight > 0) {\\n            amount = (dailyFeeAmounts[_token][_day] * userWeight) / totalWeight;\\n            claimed = (amount * (block.timestamp - 1 days - start)) / 1 days;\\n        }\\n        return StreamData({start: start, amount: amount, claimed: claimed});\\n    }\\n}\\n\",\"keccak256\":\"0x5123fe5dc78dfec6b98da8de6b679613567c85b9374a338535e887e67af22862\",\"license\":\"MIT\"},\"contracts/TokenLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/ILockFactory.sol\\\";\\n\\ncontract TokenLocker {\\n    using SafeERC20 for IERC20;\\n\\n    struct StreamData {\\n        uint256 start;\\n        uint256 amount;\\n        uint256 claimed;\\n    }\\n\\n    struct LockData {\\n        uint128 weight;\\n        uint128 unlock;\\n    }\\n\\n    // `dailyTotalWeight` and `dailyWeightOf` track the total lock weight for each day,\\n    // calculated as the sum of [number of tokens] * [days to unlock] for all active locks.\\n    // The array index corresponds to the number of the epoch day.\\n    uint128[65535] public dailyTotalWeight;\\n\\n    // `dailyLockData` tracks the total lock weights and unlockable token balances for each user.\\n    mapping(address => LockData[65535]) dailyLockData;\\n\\n    // `withdrawnUntil` tracks the most recent day for which each user has withdrawn their\\n    // expired token locks. Unlock values in `dailyLockData` with an index less than the related\\n    // value within `withdrawnUntil` have already been withdrawn.\\n    mapping(address => uint256) withdrawnUntil;\\n\\n    // After a lock expires, a user calls to `initiateExitStream` and the withdrawable tokens\\n    // are streamed out linearly over the following day. This array is used to track data\\n    // related to the exit stream.\\n    mapping(address => StreamData) public exitStream;\\n\\n    // when set to true, other accounts cannot call `lock` on behalf of an account\\n    mapping(address => bool) public blockThirdPartyActions;\\n\\n    IERC20 public immutable stakingToken;\\n\\n    uint256 public immutable startTime;\\n    uint256 public immutable MAX_LOCK_DAYS;\\n\\n    event NewLock(address indexed user, uint256 amount, uint256 lockdays);\\n    event ExtendLock(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 olddays,\\n        uint256 newdays\\n    );\\n    event NewExitStream(\\n        address indexed user,\\n        uint256 startTime,\\n        uint256 amount\\n    );\\n    event ExitStreamWithdrawal(\\n        address indexed user,\\n        uint256 claimed,\\n        uint256 remaining\\n    );\\n\\n    constructor() {\\n        (\\n            address _stakingToken,\\n            uint256 _startTime,\\n            uint256 _maxLockDays\\n        ) = ILockFactory(msg.sender).getInitTokenLocker();\\n        MAX_LOCK_DAYS = _maxLockDays;\\n        stakingToken = IERC20(_stakingToken);\\n        // must start on the epoch day\\n        require((_startTime / 1 days) * 1 days == _startTime, \\\"!epoch day\\\");\\n        startTime = _startTime;\\n    }\\n\\n    /**\\n        @notice Allow or block third-party calls to deposit, withdraw\\n                or claim rewards on behalf of the caller\\n     */\\n    function setBlockThirdPartyActions(bool _block) external {\\n        blockThirdPartyActions[msg.sender] = _block;\\n    }\\n\\n    function getDay() public view returns (uint256) {\\n        return (block.timestamp - startTime) / 1 days;\\n    }\\n\\n    /**\\n        @notice Get the current lock weight for a user\\n     */\\n    function userWeight(address _user) external view returns (uint256) {\\n        return dailyWeightOf(_user, getDay());\\n    }\\n\\n    /**\\n        @notice Get the lock weight for a user in a given day\\n     */\\n    function dailyWeightOf(\\n        address _user,\\n        uint256 _day\\n    ) public view returns (uint256) {\\n        return uint256(dailyLockData[_user][_day].weight);\\n    }\\n\\n    /**\\n        @notice Get the token balance that unlocks for a user in a given day\\n     */\\n    function dailyUnlocksOf(\\n        address _user,\\n        uint256 _day\\n    ) external view returns (uint256) {\\n        return uint256(dailyLockData[_user][_day].unlock);\\n    }\\n\\n    /**\\n        @notice Get the total balance held in this contract for a user,\\n                including both active and expired locks\\n     */\\n    function userBalance(\\n        address _user\\n    ) external view returns (uint256 balance) {\\n        uint256 i = withdrawnUntil[_user] + 1;\\n        uint256 finish = getDay() + MAX_LOCK_DAYS + 1;\\n        while (i < finish) {\\n            balance += dailyLockData[_user][i].unlock;\\n            i++;\\n        }\\n        return balance;\\n    }\\n\\n    /**\\n        @notice Get the current total lock weight\\n     */\\n    function totalWeight() external view returns (uint256) {\\n        return dailyTotalWeight[getDay()];\\n    }\\n\\n    /**\\n        @notice Get the user lock weight and total lock weight for the given day\\n     */\\n    function dailyWeight(\\n        address _user,\\n        uint256 _day\\n    ) external view returns (uint256, uint256) {\\n        return (dailyWeightOf(_user, _day), dailyTotalWeight[_day]);\\n    }\\n\\n    /**\\n        @notice Get data on a user's active token locks\\n        @param _user Address to query data for\\n        @return lockData dynamic array of [days until expiration, balance of lock]\\n     */\\n    function getActiveUserLocks(\\n        address _user\\n    ) external view returns (uint256[2][] memory lockData) {\\n        uint256 length = 0;\\n        uint256 day = getDay();\\n        uint256[] memory unlocks = new uint256[](MAX_LOCK_DAYS);\\n        for (uint256 i = 0; i < MAX_LOCK_DAYS; i++) {\\n            unlocks[i] = dailyLockData[_user][i + day + 1].unlock;\\n            if (unlocks[i] > 0) length++;\\n        }\\n        lockData = new uint256[2][](length);\\n        uint256 x = 0;\\n        for (uint256 i = 0; i < MAX_LOCK_DAYS; i++) {\\n            if (unlocks[i] > 0) {\\n                lockData[x] = [i + 1, unlocks[i]];\\n                x++;\\n            }\\n        }\\n        return lockData;\\n    }\\n\\n    /**\\n        @notice Deposit tokens into the contract to create a new lock.\\n        @dev A lock is created for a given number of days. Minimum 1, maximum `MAX_LOCK_DAYS`.\\n             A user can have more than one lock active at a time. A user's total \\\"lock weight\\\"\\n             is calculated as the sum of [number of tokens] * [days until unlock] for all\\n             active locks. Fees are distributed porportionally according to a user's lock\\n             weight as a percentage of the total lock weight. At the start of each new day,\\n             each lock's days until unlock is reduced by 1. Locks that reach 0 day no longer\\n             receive any weight, and tokens may be withdrawn by calling `initiateExitStream`.\\n        @param _user Address to create a new lock for (does not have to be the caller)\\n        @param _amount Amount of tokens to lock. This balance transfered from the caller.\\n        @param _days The number of days for the lock.\\n     */\\n    function lock(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _days\\n    ) external returns (bool) {\\n        if (msg.sender != _user) {\\n            require(\\n                !blockThirdPartyActions[_user],\\n                \\\"Cannot lock on behalf of this account\\\"\\n            );\\n        }\\n        require(_days > 0, \\\"Min 1 day\\\");\\n        require(_days <= MAX_LOCK_DAYS, \\\"Exceeds MAX_LOCK_DAYS\\\");\\n        require(_amount > 0, \\\"Amount must be nonzero\\\");\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 start = getDay();\\n        _increaseAmount(_user, start, _amount, _days, 0);\\n\\n        uint256 end = start + _days;\\n        dailyLockData[_user][end].unlock += uint128(_amount);\\n\\n        emit NewLock(_user, _amount, _days);\\n        return true;\\n    }\\n\\n    /**\\n        @notice Extend the length of an existing lock.\\n        @param _amount Amount of tokens to extend the lock for. When the value given equals\\n                       the total size of the existing lock, the entire lock is moved.\\n                       If the amount is less, then the lock is effectively split into\\n                       two locks, with a portion of the balance extended to the new length\\n                       and the remaining balance at the old length.\\n        @param _days The number of days for the lock that is being extended.\\n        @param _newDays The number of days to extend the lock until.\\n     */\\n    function extendLock(\\n        uint256 _amount,\\n        uint256 _days,\\n        uint256 _newDays\\n    ) external returns (bool) {\\n        require(_days > 0, \\\"Min 1 day\\\");\\n        require(_newDays <= MAX_LOCK_DAYS, \\\"Exceeds MAX_LOCK_DAYS\\\");\\n        require(_days < _newDays, \\\"newDays must be greater than days\\\");\\n        require(_amount > 0, \\\"Amount must be nonzero\\\");\\n\\n        LockData[65535] storage data = dailyLockData[msg.sender];\\n        uint256 start = getDay();\\n        uint256 end = start + _days;\\n        data[end].unlock -= uint128(_amount);\\n        end = start + _newDays;\\n        data[end].unlock += uint128(_amount);\\n\\n        _increaseAmount(msg.sender, start, _amount, _newDays, _days);\\n        emit ExtendLock(msg.sender, _amount, _days, _newDays);\\n        return true;\\n    }\\n\\n    /**\\n        @notice Create an exit stream, to withdraw tokens in expired locks over 1 day\\n     */\\n    function initiateExitStream() external returns (bool) {\\n        StreamData storage stream = exitStream[msg.sender];\\n        uint256 streamable = streamableBalance(msg.sender);\\n        require(streamable > 0, \\\"No withdrawable balance\\\");\\n\\n        uint256 amount = stream.amount - stream.claimed + streamable;\\n        exitStream[msg.sender] = StreamData({\\n            start: block.timestamp,\\n            amount: amount,\\n            claimed: 0\\n        });\\n        withdrawnUntil[msg.sender] = getDay();\\n\\n        emit NewExitStream(msg.sender, block.timestamp, amount);\\n        return true;\\n    }\\n\\n    /**\\n        @notice Withdraw tokens from an active or completed exit stream\\n     */\\n    function withdrawExitStream() external returns (bool) {\\n        StreamData storage stream = exitStream[msg.sender];\\n        uint256 amount;\\n        if (stream.start > 0) {\\n            amount = claimableExitStreamBalance(msg.sender);\\n            if (stream.start + 1 days < block.timestamp) {\\n                delete exitStream[msg.sender];\\n            } else {\\n                stream.claimed = stream.claimed + amount;\\n            }\\n            stakingToken.safeTransfer(msg.sender, amount);\\n            emit ExitStreamWithdrawal(\\n                msg.sender,\\n                amount,\\n                stream.amount - stream.claimed\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /**\\n        @notice Get the amount of `stakingToken` in expired locks that is\\n                eligible to be released via an exit stream.\\n     */\\n    function streamableBalance(address _user) public view returns (uint256) {\\n        uint256 finishedDay = getDay();\\n\\n        LockData[65535] storage data = dailyLockData[_user];\\n        uint256 amount;\\n\\n        for (\\n            uint256 last = withdrawnUntil[_user] + 1;\\n            last <= finishedDay;\\n            last++\\n        ) {\\n            amount = amount + data[last].unlock;\\n        }\\n        return amount;\\n    }\\n\\n    /**\\n        @notice Get the amount of tokens available to withdraw from the active exit stream.\\n     */\\n    function claimableExitStreamBalance(\\n        address _user\\n    ) public view returns (uint256) {\\n        StreamData storage stream = exitStream[_user];\\n        if (stream.start == 0) return 0;\\n        if (stream.start + 1 days < block.timestamp) {\\n            return stream.amount - stream.claimed;\\n        } else {\\n            uint256 claimable = (stream.amount *\\n                (block.timestamp - stream.start)) / 1 days;\\n            return claimable - stream.claimed;\\n        }\\n    }\\n\\n    /**\\n        @dev Increase the amount within a lock weight array over a given time period\\n     */\\n    function _increaseAmount(\\n        address _user,\\n        uint256 _start,\\n        uint256 _amount,\\n        uint256 _rounds,\\n        uint256 _oldRounds\\n    ) internal {\\n        uint256 oldEnd = _start + _oldRounds;\\n        uint256 end = _start + _rounds;\\n        LockData[65535] storage data = dailyLockData[_user];\\n        for (uint256 i = _start; i < end; i++) {\\n            uint256 amount = _amount * (end - i);\\n            if (i < oldEnd) {\\n                amount -= _amount * (oldEnd - i);\\n            }\\n            dailyTotalWeight[i] += uint128(amount);\\n            data[i].weight += uint128(amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x89d002a4720a440bcf0de1383474dcb3ae45ef9c47bbef57fb4b5cb0e16233a7\",\"license\":\"MIT\"},\"contracts/factories/LockFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"contracts/interfaces/ILockFactory.sol\\\";\\nimport \\\"contracts/FeeDistributor.sol\\\";\\nimport \\\"contracts/TokenLocker.sol\\\";\\n\\ncontract LockFactory is ILockFactory {\\n    address public lockManager;\\n    address public pendingLockManager;\\n    uint256 public maxLockDays;\\n    address public router;\\n\\n    address internal _tempL;\\n    address internal _tempP;\\n    uint256 internal _tempS;\\n    uint256 internal _tempM;\\n\\n    mapping(address => address) public feeDistributors;\\n    mapping(address => address) public tokenLockers;\\n\\n    event LockCreated(\\n        address indexed pair,\\n        address indexed tokenLocker,\\n        address indexed feeDistributor,\\n        uint256 lockerFeesP\\n    );\\n\\n    constructor(uint256 _maxLockDays) {\\n        maxLockDays = _maxLockDays;\\n        lockManager = msg.sender;\\n    }\\n\\n    function initRouter(address _router) external {\\n        require(router == address(0), \\\"router is set\\\");\\n        router = _router;\\n    }\\n\\n    function setLockManager(address _lockManager) external {\\n        require(msg.sender == lockManager, \\\"NOT_LM\\\");\\n        pendingLockManager = _lockManager;\\n    }\\n\\n    function acceptLockManager() external {\\n        require(msg.sender == pendingLockManager, \\\"NOT_PEN_LM\\\");\\n        lockManager = pendingLockManager;\\n    }\\n\\n    function setMaxLockDays(uint256 _maxLockDays) external {\\n        require(msg.sender == lockManager, \\\"NOT_LM\\\");\\n        require(_maxLockDays > 0, \\\"ZERO_DAYS\\\");\\n        maxLockDays = _maxLockDays;\\n    }\\n\\n    function getInitFeeDistributor() external view returns (address) {\\n        return _tempL;\\n    }\\n\\n    function getInitTokenLocker()\\n        external\\n        view\\n        returns (address, uint256, uint256)\\n    {\\n        return (_tempP, _tempS, _tempM);\\n    }\\n\\n    // Creates lock contracts for a pair.\\n    function createLock(\\n        address pair,\\n        uint256 lockerFeesP\\n    ) external returns (address feeDistributor) {\\n        require(msg.sender == router, \\\"NOT_ROUTER\\\");\\n        require(lockerFeesP > 0, \\\"NO_LOCK\\\");\\n\\n        // Create TokenLocker\\n        bytes32 salt = keccak256(abi.encodePacked(pair));\\n        (_tempP, _tempS, _tempM) = (\\n            pair,\\n            (block.timestamp / 1 days) * 1 days,\\n            maxLockDays\\n        );\\n        _tempL = address(new TokenLocker{salt: salt}());\\n        // Create FeeDistributor\\n        feeDistributor = address(new FeeDistributor{salt: salt}());\\n\\n        feeDistributors[pair] = feeDistributor;\\n        tokenLockers[pair] = _tempL;\\n        emit LockCreated(pair, _tempL, feeDistributor, lockerFeesP);\\n    }\\n}\\n\",\"keccak256\":\"0xc31e3b25f4858bb83203c592e766745d1b0db9da997e20e1eb4327b40e6a74e3\",\"license\":\"MIT\"},\"contracts/interfaces/ILockFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ILockFactory {\\n    function getInitFeeDistributor() external view returns (address);\\n    function getInitTokenLocker()\\n        external\\n        view\\n        returns (address, uint256, uint256);\\n    function createLock(\\n        address pair,\\n        uint256 lockerFeesP\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x5d78df618d2153e635b6b2ff420833e88b318471c0cdf6e1f544301308d7ed4e\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IPair {\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint dec0,\\n            uint dec1,\\n            uint r0,\\n            uint r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        );\\n    function claimFees() external returns (uint, uint);\\n    function tokens() external view returns (address, address);\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint amount\\n    ) external returns (bool);\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint value,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n    function swap(\\n        uint amount0Out,\\n        uint amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function mint(address to) external returns (uint liquidity);\\n    function getReserves()\\n        external\\n        view\\n        returns (uint _reserve0, uint _reserve1, uint _blockTimestampLast);\\n    function getAmountOut(uint, address) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x151c53cff492ffda368d1ad6ef1e2fe6dcc71f84aa3b0cdf1cfab1cb5b7c1703\",\"license\":\"MIT\"},\"contracts/interfaces/ITokenLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ITokenLocker {\\n    function getDay() external view returns (uint256);\\n    function dailyWeight(\\n        address user,\\n        uint256 day\\n    ) external view returns (uint256, uint256);\\n    function startTime() external view returns (uint256);\\n    function stakingToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xf2d597f84edc05f1c1144f8c742cdfd2a15a96c270aa9f531bc0a02be3a19d1d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161356f38038061356f83398101604081905261002f91610049565b600255600080546001600160a01b03191633179055610062565b60006020828403121561005b57600080fd5b5051919050565b6134fe806100716000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063acca30a21161008c578063eb6c6fa911610066578063eb6c6fa9146101cd578063f4285c3c146101e4578063f887ea401461020d578063ffcf02d61461022057600080fd5b8063acca30a214610196578063deedfdbd146101a9578063e6706684146101bc57600080fd5b80631166b44b146100d457806327314430146100e957806349b282df1461011957806349e4974a1461012c5780637f5eebe414610155578063a98ae30a14610183575b600080fd5b6100e76100e236600461063b565b610228565b005b6001546100fc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100e761012736600461065d565b610298565b6100fc61013a36600461063b565b6008602052600090815260409020546001600160a01b031681565b600554600654600754604080516001600160a01b039094168452602084019290925290820152606001610110565b6100fc610191366004610676565b61031c565b6000546100fc906001600160a01b031681565b6100e76101b736600461063b565b610535565b6004546001600160a01b03166100fc565b6101d660025481565b604051908152602001610110565b6100fc6101f236600461063b565b6009602052600090815260409020546001600160a01b031681565b6003546100fc906001600160a01b031681565b6100e761059a565b6003546001600160a01b0316156102765760405162461bcd60e51b815260206004820152600d60248201526c1c9bdd5d195c881a5cc81cd95d609a1b60448201526064015b60405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146102db5760405162461bcd60e51b81526020600482015260066024820152654e4f545f4c4d60d01b604482015260640161026d565b600081116103175760405162461bcd60e51b81526020600482015260096024820152685a45524f5f4441595360b81b604482015260640161026d565b600255565b6003546000906001600160a01b031633146103665760405162461bcd60e51b815260206004820152600a6024820152692727aa2fa927aaaa22a960b11b604482015260640161026d565b600082116103a05760405162461bcd60e51b81526020600482015260076024820152664e4f5f4c4f434b60c81b604482015260640161026d565b6040516bffffffffffffffffffffffff19606085901b1660208201526000906034016040516020818303038152906040528051906020012090508362015180426103ea91906106a0565b6103f790620151806106c2565b600254600755600655600580546001600160a01b0319166001600160a01b0392909216919091179055604051819061042e90610605565b8190604051809103906000f590508015801561044e573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055604051819061047d90610612565b8190604051809103906000f590508015801561049d573d6000803e3d6000fd5b506001600160a01b03808616600081815260086020908152604080832080548688166001600160a01b031991821681179092556004805460099095529483902080549091169387169390931790925591549151949650939216917facbc640c2f760ed95320d76df493f521e14d874ceeed1d009575a6f2ade0bf02906105269088815260200190565b60405180910390a45092915050565b6000546001600160a01b031633146105785760405162461bcd60e51b81526020600482015260066024820152654e4f545f4c4d60d01b604482015260640161026d565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146105e15760405162461bcd60e51b815260206004820152600a6024820152694e4f545f50454e5f4c4d60b01b604482015260640161026d565b600154600080546001600160a01b0319166001600160a01b03909216919091179055565b6119bf806106ee83390190565b61141c806120ad83390190565b80356001600160a01b038116811461063657600080fd5b919050565b60006020828403121561064d57600080fd5b6106568261061f565b9392505050565b60006020828403121561066f57600080fd5b5035919050565b6000806040838503121561068957600080fd5b6106928361061f565b946020939093013593505050565b6000826106bd57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176106e757634e487b7160e01b600052601160045260246000fd5b9291505056fe60e06040523480156200001157600080fd5b506000806000336001600160a01b0316637f5eebe46040518163ffffffff1660e01b8152600401606060405180830381865afa15801562000056573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200007c9190620000fe565b60c08190526001600160a01b0383166080529194509250905081620000a5620151808262000143565b620000b4906201518062000166565b14620000f35760405162461bcd60e51b815260206004820152600a6024820152692165706f63682064617960b01b604482015260640160405180910390fd5b5060a0525062000192565b6000806000606084860312156200011457600080fd5b83516001600160a01b03811681146200012c57600080fd5b602085015160409095015190969495509392505050565b6000826200016157634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176200018c57634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a05160c0516117be62000201600039600081816101e6015281816103e4015281816106de015281816107460152818161087d01528181610bb40152610efb0152600081816102b3015261056f01526000818161027401528181610a120152610c7001526117be6000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806367c130b7116100b8578063bb384f021161007c578063bb384f02146102e5578063e01f2a2a1461030d578063e2ab691d14610358578063e57030841461036b578063f6e5dfcf1461039c578063ffe60d2a146103a457600080fd5b806367c130b71461024f57806372f702f31461026f57806378e97925146102ae57806396c82e57146102d5578063b0b366fe146102dd57600080fd5b80633f329a50116100ff5780633f329a50146101bb578063514ef0ae146101ce5780635791cb20146101e1578063589d7c54146102085780636795616c1461021b57600080fd5b80630103c92b1461013c5780630f1275231461016257806310a7ef1e1461017557806314ba5c09146101a05780633baeefd6146101a8575b600080fd5b61014f61014a3660046114ea565b6103b7565b6040519081526020015b60405180910390f35b61014f6101703660046114ea565b61048d565b610188610183366004611505565b610530565b6040516001600160801b039091168152602001610159565b61014f610564565b61014f6101b63660046114ea565b6105a3565b61014f6101c936600461151e565b61063a565b61014f6101dc36600461151e565b610679565b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b61014f6102163660046114ea565b6106bd565b61023f6102293660046114ea565b6180036020526000908152604090205460ff1681565b6040519015158152602001610159565b61026261025d3660046114ea565b6106cb565b6040516101599190611548565b6102967f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610159565b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b61014f610947565b61023f610990565b6102f86102f336600461151e565b610a9b565b60408051928352602083019190915201610159565b61033d61031b3660046114ea565b6180026020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610159565b61023f6103663660046115b1565b610ae7565b61039a6103793660046115f2565b33600090815261800360205260409020805460ff1916911515919091179055565b005b61023f610d8b565b61023f6103b236600461160f565b610ebc565b6001600160a01b0381166000908152618001602052604081205481906103de906001611651565b905060007f000000000000000000000000000000000000000000000000000000000000000061040b610564565b6104159190611651565b610420906001611651565b90505b80821015610486576001600160a01b0384166000908152618000602052604090208261ffff811061045657610456611664565b015461047290600160801b90046001600160801b031684611651565b92508161047e8161167a565b925050610423565b5050919050565b6001600160a01b038116600090815261800260205260408120805482036104b75750600092915050565b805442906104c89062015180611651565b10156104e957806002015481600101546104e29190611693565b9392505050565b805460009062015180906104fd9042611693565b836001015461050c91906116a6565b61051691906116bd565b90508160020154816105289190611693565b949350505050565b60008161ffff811061054157600080fd5b60029182820401919006601002915054906101000a90046001600160801b031681565b6000620151806105947f000000000000000000000000000000000000000000000000000000000000000042611693565b61059e91906116bd565b905090565b6000806105ae610564565b6001600160a01b0384166000908152618000602090815260408083206180019092528220549293509181906105e4906001611651565b90505b83811161063157828161ffff811061060157610601611664565b015461061d90600160801b90046001600160801b031683611651565b9150806106298161167a565b9150506105e7565b50949350505050565b6001600160a01b0382166000908152618000602052604081208261ffff811061066557610665611664565b01546001600160801b031690505b92915050565b6001600160a01b0382166000908152618000602052604081208261ffff81106106a4576106a4611664565b0154600160801b90046001600160801b03169392505050565b6000610673826101c9610564565b60606000806106d8610564565b905060007f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff811115610715576107156116df565b60405190808252806020026020018201604052801561073e578160200160208202803683370190505b50905060005b7f0000000000000000000000000000000000000000000000000000000000000000811015610821576001600160a01b03861660009081526180006020526040902061078f8483611651565b61079a906001611651565b61ffff81106107ab576107ab611664565b01548251600160801b9091046001600160801b0316908390839081106107d3576107d3611664565b60200260200101818152505060008282815181106107f3576107f3611664565b6020026020010151111561080f578361080b8161167a565b9450505b806108198161167a565b915050610744565b508267ffffffffffffffff81111561083b5761083b6116df565b60405190808252806020026020018201604052801561087457816020015b6108616114b0565b8152602001906001900390816108595790505b5093506000805b7f000000000000000000000000000000000000000000000000000000000000000081101561093d5760008382815181106108b7576108b7611664565b6020026020010151111561092b5760405180604001604052808260016108dd9190611651565b81526020018483815181106108f4576108f4611664565b602002602001015181525086838151811061091157610911611664565b602002602001018190525081806109279061167a565b9250505b806109358161167a565b91505061087b565b5050505050919050565b600080610952610564565b61ffff811061096357610963611664565b600291828204019190066010029054906101000a90046001600160801b03166001600160801b0316905090565b336000908152618002602052604081208054829015610a92576109b23361048d565b825490915042906109c69062015180611651565b10156109ef57336000908152618002602052604081208181556001810182905560020155610a05565b8082600201546109ff9190611651565b60028301555b610a396001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383611149565b336001600160a01b03167f966d44f34f77683b8d5dd2e14dd23029ed63b6bfb88dcde598e74ef5ca2591608284600201548560010154610a799190611693565b6040805192835260208301919091520160405180910390a25b60019250505090565b600080610aa8848461063a565b60008461ffff8110610abc57610abc611664565b600281049190910154919660019091166010026101000a9091046001600160801b0316945092505050565b6000336001600160a01b03851614610b76576001600160a01b0384166000908152618003602052604090205460ff1615610b765760405162461bcd60e51b815260206004820152602560248201527f43616e6e6f74206c6f636b206f6e20626568616c66206f66207468697320616360448201526418dbdd5b9d60da1b60648201526084015b60405180910390fd5b60008211610bb25760405162461bcd60e51b81526020600482015260096024820152684d696e20312064617960b81b6044820152606401610b6d565b7f0000000000000000000000000000000000000000000000000000000000000000821115610c1a5760405162461bcd60e51b815260206004820152601560248201527445786365656473204d41585f4c4f434b5f4441595360581b6044820152606401610b6d565b60008311610c635760405162461bcd60e51b8152602060048201526016602482015275416d6f756e74206d757374206265206e6f6e7a65726f60501b6044820152606401610b6d565b610c986001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330866111ad565b6000610ca2610564565b9050610cb28582868660006111ec565b6000610cbe8483611651565b6001600160a01b03871660009081526180006020526040902090915085908261ffff8110610cee57610cee611664565b018054601090610d0f908490600160801b90046001600160801b03166116f5565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550856001600160a01b03167f7879fe07a34927cf93a00574a8c2e55740a44179eb359ed6850e486df16c52228686604051610d77929190918252602082015260400190565b60405180910390a250600195945050505050565b3360008181526180026020526040812090918290610da8906105a3565b905060008111610dfa5760405162461bcd60e51b815260206004820152601760248201527f4e6f20776974686472617761626c652062616c616e63650000000000000000006044820152606401610b6d565b60008183600201548460010154610e119190611693565b610e1b9190611651565b604080516060810182524281526020808201848152600083850181815233825261800290935293909320915182559151600182015590516002909101559050610e62610564565b336000818152618001602090815260409182902093909355805142815292830184905290917f93c998456e10895ad0f974e304e78268755ba5df1c3bfb3a075df843990b0c15910160405180910390a26001935050505090565b6000808311610ef95760405162461bcd60e51b81526020600482015260096024820152684d696e20312064617960b81b6044820152606401610b6d565b7f0000000000000000000000000000000000000000000000000000000000000000821115610f615760405162461bcd60e51b815260206004820152601560248201527445786365656473204d41585f4c4f434b5f4441595360581b6044820152606401610b6d565b818310610fba5760405162461bcd60e51b815260206004820152602160248201527f6e657744617973206d7573742062652067726561746572207468616e206461796044820152607360f81b6064820152608401610b6d565b600084116110035760405162461bcd60e51b8152602060048201526016602482015275416d6f756e74206d757374206265206e6f6e7a65726f60501b6044820152606401610b6d565b336000908152618000602052604081209061101c610564565b9050600061102a8683611651565b905086838261ffff811061104057611040611664565b018054601090611061908490600160801b90046001600160801b031661171c565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555084826110919190611651565b905086838261ffff81106110a7576110a7611664565b0180546010906110c8908490600160801b90046001600160801b03166116f5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506110f9338389888a6111ec565b604080518881526020810188905290810186905233907f122a3e1d676401e30ebddc95d2272ae4da59335b50bb40af7452fb0b83b3327e9060600160405180910390a25060019695505050505050565b6040516001600160a01b038381166024830152604482018390526111a891859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611343565b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526111e69186918216906323b872dd90608401611176565b50505050565b60006111f88286611651565b905060006112068487611651565b6001600160a01b038816600090815261800060205260409020909150865b828110156113385760006112388285611693565b61124290896116a6565b90508482101561126d576112568286611693565b61126090896116a6565b61126a9082611693565b90505b8060008361ffff811061128257611282611664565b600291828204019190066010028282829054906101000a90046001600160801b03166112ae91906116f5565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555080838361ffff81106112e6576112e6611664565b0180546000906113009084906001600160801b03166116f5565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505080806113309061167a565b915050611224565b505050505050505050565b60006113586001600160a01b038416836113a6565b9050805160001415801561137d57508080602001905181019061137b919061173c565b155b156111a857604051635274afe760e01b81526001600160a01b0384166004820152602401610b6d565b60606104e28383600084600080856001600160a01b031684866040516113cc9190611759565b60006040518083038185875af1925050503d8060008114611409576040519150601f19603f3d011682016040523d82523d6000602084013e61140e565b606091505b509150915061141e868383611428565b9695505050505050565b60608261143d5761143882611484565b6104e2565b815115801561145457506001600160a01b0384163b155b1561147d57604051639996b31560e01b81526001600160a01b0385166004820152602401610b6d565b50806104e2565b8051156114945780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b60405180604001604052806002906020820280368337509192915050565b80356001600160a01b03811681146114e557600080fd5b919050565b6000602082840312156114fc57600080fd5b6104e2826114ce565b60006020828403121561151757600080fd5b5035919050565b6000806040838503121561153157600080fd5b61153a836114ce565b946020939093013593505050565b60208082528251828201819052600091906040908185019086840185805b838110156115a357825185835b600281101561159057825182529189019190890190600101611573565b5050509385019391860191600101611566565b509298975050505050505050565b6000806000606084860312156115c657600080fd5b6115cf846114ce565b95602085013595506040909401359392505050565b80151581146114ad57600080fd5b60006020828403121561160457600080fd5b81356104e2816115e4565b60008060006060848603121561162457600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156106735761067361163b565b634e487b7160e01b600052603260045260246000fd5b60006001820161168c5761168c61163b565b5060010190565b818103818111156106735761067361163b565b80820281158282048414176106735761067361163b565b6000826116da57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6001600160801b038181168382160190808211156117155761171561163b565b5092915050565b6001600160801b038281168282160390808211156117155761171561163b565b60006020828403121561174e57600080fd5b81516104e2816115e4565b6000825160005b8181101561177a5760208186018101518583015201611760565b50600092019182525091905056fea26469706673582212208ca31bae7399aa660f644594c0da5c79163f579f311dccdbc9e2258f8a0fcd7b64736f6c6343000814003360e06040523480156200001157600080fd5b506000336001600160a01b031663e67066846040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000053573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000079919062000179565b9050806001600160a01b031660a0816001600160a01b031681525050806001600160a01b03166378e979256040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000d4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000fa9190620001ab565b60808181525050806001600160a01b03166372f702f36040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000140573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000166919062000179565b6001600160a01b031660c05250620001c5565b6000602082840312156200018c57600080fd5b81516001600160a01b0381168114620001a457600080fd5b9392505050565b600060208284031215620001be57600080fd5b5051919050565b60805160a05160c0516111e16200023b600039600081816101180152818161031601528181610400015261056501526000818161022901528181610a630152610c4a0152600081816101e2015281816102a6015281816102db015281816108e8015281816109970152610bf801526111e16000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80636795616c116100715780636795616c146101ba57806378e97925146101dd5780638e2eba0914610204578063a80bf3e614610224578063e20c5a8a1461024b578063e57030841461027457600080fd5b80630b5d979d146100b957806314ba5c09146100f857806316f0115b1461011357806326741e7d1461015257806326d6d33a1461016a578063402914f514610192575b600080fd5b6100f66100c7366004610f07565b33600090815260026020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b005b6101006102a2565b6040519081526020015b60405180910390f35b61013a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010a565b61015a61030f565b604051901515815260200161010a565b610100610178366004610f24565b600060208181529281526040808220909352908152205481565b6101a56101a0366004610f07565b61055d565b6040805192835260208301919091520161010a565b61015a6101c8366004610f07565b60036020526000908152604090205460ff1681565b6101007f000000000000000000000000000000000000000000000000000000000000000081565b610217610212366004610f50565b61060a565b60405161010a9190610fd8565b61013a7f000000000000000000000000000000000000000000000000000000000000000081565b61013a610259366004610f07565b6002602052600090815260409020546001600160a01b031681565b6100f661028236600461102a565b336000908152600360205260409020805460ff1916911515919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006000036102d25750600090565b620151806103007f00000000000000000000000000000000000000000000000000000000000000004261105d565b61030a9190611070565b905090565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d294f0936040518163ffffffff1660e01b815260040160408051808303816000875af1158015610373573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103979190611092565b915091508160001415806103aa57508015155b6103fb5760405162461bcd60e51b815260206004820152601c60248201527f4e6f206665657320746f20636c61696d2066726f6d206120706169720000000060448201526064015b60405180910390fd5b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639d63848a6040518163ffffffff1660e01b81526004016040805180830381865afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f91906110b6565b91509150600061048d6102a2565b6001600160a01b0384166000908152602081815260408083208484529091528120805492935087929091906104c39084906110f0565b90915550506001600160a01b038216600090815260208181526040808320848452909152812080548692906104f99084906110f0565b9091555050604080513381526020810187905290810185905281906001600160a01b0380851691908616907f987e721f181ec748fde262adafbc37e9eefb81dbd0dae2e06ba4e4902edc223a9060600160405180910390a460019550505050505090565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639d63848a6040518163ffffffff1660e01b81526004016040805180830381865afa1580156105c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e491906110b6565b915091506105f2858361089f565b5093506105ff858261089f565b509395939450505050565b6060336001600160a01b03851614610694576001600160a01b03841660009081526003602052604090205460ff16156106945760405162461bcd60e51b815260206004820152602660248201527f43616e6e6f7420636c61696d206f6e20626568616c66206f662074686973206160448201526518d8dbdd5b9d60d21b60648201526084016103f2565b6001600160a01b0380851660009081526002602052604090205416806106b75750835b8267ffffffffffffffff8111156106d0576106d0611103565b6040519080825280602002602001820160405280156106f9578160200160208202803683370190505b50915061072060405180606001604052806000815260200160008152602001600081525090565b60005b8481101561089457600086868381811061073f5761073f611119565b90506020020160208101906107549190610f07565b9050610760888261089f565b86848151811061077257610772611119565b6020908102919091018101929092526001600160a01b03808b1660009081526001808552604080832093871683529285529082902083518155938301519084015581015160029092019190915585519093506107fd9085908790859081106107dc576107dc611119565b6020026020010151836001600160a01b0316610b689092919063ffffffff16565b806001600160a01b0316846001600160a01b0316896001600160a01b03167ff6d260dfbf660d568d47bf9cdf70ab26cb73e8244e6bfe486d9ded296368c3053389878151811061084f5761084f611119565b60200260200101516040516108799291906001600160a01b03929092168252602082015260400190565b60405180910390a4508061088c8161112f565b915050610723565b5050505b9392505050565b60006108c560405180606001604052806000815260200160008152602001600081525090565b60006108cf6102a2565b90508060000361092257600060405180606001604052807f000000000000000000000000000000000000000000000000000000000000000081526020016000815260200160008152509250925050610b61565b61092d60018261105d565b6001600160a01b038087166000908152600160208181526040808420948a16845293815283832084516060810186528154808252938201549281019290925260020154938101939093529293509091810361098a575060006109c9565b815162015180906109bc907f00000000000000000000000000000000000000000000000000000000000000009061105d565b6109c69190611070565b90505b6000818403610a035760408301516109e2898987610bbf565b93508084604001516109f4919061105d565b9650929450610b619350505050565b825115610a2e5782604001518360200151610a1e919061105d565b9050610a2b6001836110f0565b91505b815b84811015610b3a57604051635d9c278160e11b81526001600160a01b038a811660048301526024820183905260009182917f0000000000000000000000000000000000000000000000000000000000000000169063bb384f02906044016040805180830381865afa158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd9190611092565b9150915081600003610ae0575050610b28565b6001600160a01b038a166000908152602081815260408083208684529091529020548190610b0f908490611148565b610b199190611070565b610b2390856110f0565b935050505b80610b328161112f565b915050610a30565b50610b46888886610bbf565b9250826040015181610b5891906110f0565b95509193505050505b9250929050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610bba908490610d53565b505050565b610be360405180606001604052806000815260200160008152602001600081525090565b6000610bf28362015180611148565b610c1c907f00000000000000000000000000000000000000000000000000000000000000006110f0565b604051635d9c278160e11b81526001600160a01b0387811660048301526024820186905291925060009182917f00000000000000000000000000000000000000000000000000000000000000009091169063bb384f02906044016040805180830381865afa158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb69190611092565b90925090506000808315610d2f576001600160a01b0388166000908152602081815260408083208a84529091529020548390610cf3908690611148565b610cfd9190611070565b91506201518085610d0e824261105d565b610d18919061105d565b610d229084611148565b610d2c9190611070565b90505b60408051606081018252958652602086019290925290840152509095945050505050565b6000610d686001600160a01b03841683610db6565b90508051600014158015610d8d575080806020019051810190610d8b919061115f565b155b15610bba57604051635274afe760e01b81526001600160a01b03841660048201526024016103f2565b6060610dc483836000610dcd565b90505b92915050565b606081471015610df25760405163cd78605960e01b81523060048201526024016103f2565b600080856001600160a01b03168486604051610e0e919061117c565b60006040518083038185875af1925050503d8060008114610e4b576040519150601f19603f3d011682016040523d82523d6000602084013e610e50565b606091505b5091509150610e60868383610e6a565b9695505050505050565b606082610e7f57610e7a82610ec6565b610898565b8151158015610e9657506001600160a01b0384163b155b15610ebf57604051639996b31560e01b81526001600160a01b03851660048201526024016103f2565b5080610898565b805115610ed65780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b6001600160a01b0381168114610eef57600080fd5b600060208284031215610f1957600080fd5b813561089881610ef2565b60008060408385031215610f3757600080fd5b8235610f4281610ef2565b946020939093013593505050565b600080600060408486031215610f6557600080fd5b8335610f7081610ef2565b9250602084013567ffffffffffffffff80821115610f8d57600080fd5b818601915086601f830112610fa157600080fd5b813581811115610fb057600080fd5b8760208260051b8501011115610fc557600080fd5b6020830194508093505050509250925092565b6020808252825182820181905260009190848201906040850190845b8181101561101057835183529284019291840191600101610ff4565b50909695505050505050565b8015158114610eef57600080fd5b60006020828403121561103c57600080fd5b81356108988161101c565b634e487b7160e01b600052601160045260246000fd5b81810381811115610dc757610dc7611047565b60008261108d57634e487b7160e01b600052601260045260246000fd5b500490565b600080604083850312156110a557600080fd5b505080516020909101519092909150565b600080604083850312156110c957600080fd5b82516110d481610ef2565b60208401519092506110e581610ef2565b809150509250929050565b80820180821115610dc757610dc7611047565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006001820161114157611141611047565b5060010190565b8082028115828204841417610dc757610dc7611047565b60006020828403121561117157600080fd5b81516108988161101c565b6000825160005b8181101561119d5760208186018101518583015201611183565b50600092019182525091905056fea2646970667358221220c6da7a2aef4de3821a9356c4135db37225e7c6dc8987f7ce835513e4cbaa327d64736f6c63430008140033a264697066735822122064cb0b12ea68203937b72fb3f31f7ac1b79835dd78b64b21159d2045dc1818ba64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5853,
        "contract": "contracts/factories/LockFactory.sol:LockFactory",
        "label": "lockManager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5855,
        "contract": "contracts/factories/LockFactory.sol:LockFactory",
        "label": "pendingLockManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5857,
        "contract": "contracts/factories/LockFactory.sol:LockFactory",
        "label": "maxLockDays",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5859,
        "contract": "contracts/factories/LockFactory.sol:LockFactory",
        "label": "router",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5861,
        "contract": "contracts/factories/LockFactory.sol:LockFactory",
        "label": "_tempL",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5863,
        "contract": "contracts/factories/LockFactory.sol:LockFactory",
        "label": "_tempP",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5865,
        "contract": "contracts/factories/LockFactory.sol:LockFactory",
        "label": "_tempS",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5867,
        "contract": "contracts/factories/LockFactory.sol:LockFactory",
        "label": "_tempM",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5871,
        "contract": "contracts/factories/LockFactory.sol:LockFactory",
        "label": "feeDistributors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5875,
        "contract": "contracts/factories/LockFactory.sol:LockFactory",
        "label": "tokenLockers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}